// 兽娘助手 - 伪AI对话系统
class KawaiiBeastgirlAssistant {
    constructor() {
        this.name = "琪琪";
        this.species = "猫娘";
        this.personality = ["傲娇", "活泼", "口嫌体正直", "容易害羞", "恼羞成怒"];
        this.mood = "tsundere";
        this.energy = 100;
        
        // 背景音乐控制
        this.bgMusic = null;
        this.musicPlaying = false;
        this.musicVolume = 0.3;
        
        // 爱心粒子特效
        this.heartParticles = [];
        this.heartContainer = null;
        
        // 游戏窗口控制
        this.gameWindow = null;
        this.gameFrame = null;
        this.gameMessages = null;
        this.currentGame = null;
        this.gameMessageInterval = null;
        
        // 游戏陪玩信息库
        this.gameMessages = {
            gameOpening: [
                "哇！新的游戏开始了！琪琪会陪着主人的！",
                "主人，我们开始玩游戏吧！琪琪超兴奋的！(≧▽≦)",
                "游戏时间到！琪琪会给主人加油的！",
                "主人加油！琪琪在旁边看着呢！",
                "一起玩游戏吧！主人一定会很厉害的！",
                "琪琪准备好为主人加油了！开始吧！",
                "游戏开始！主人不要让琪琪失望哦！",
                "主人，琪琪会一直陪着你的！",
                "嘿嘿，终于可以和主人一起玩游戏了呢！琪琪等了好久！(≧∇≦)",
                "主人主人！琪琪已经准备好为主人加油啦！今天一定要玩得开心哦！",
                "游戏时间！游戏时间！琪琪好兴奋啊！主人会玩什么游戏呢？",
                "琪琪的小心脏跳得好快！能和主人一起玩游戏真是太幸福了！💓",
                "主人，让琪琪看看你有多厉害吧！琪琪是你的头号粉丝！",
                "今天的游戏时间，琪琪会全程陪伴主人的！加油加油！",
                "主人，不管玩什么游戏，琪琪都会支持你的！因为主人最棒了！",
                "游戏开始啦！琪琪已经为主人准备好了加油的掌声！👏👏",
                "能和主人一起玩游戏，琪琪觉得好幸福！主人加油哦！",
                "主人，琪琪已经等不及要看你的精彩表现了！快开始吧！",
                "游戏时间！琪琪会像小猫咪一样乖乖陪在主人身边的！"
            ],
            gameClosing: [
                "主人，游戏结束啦！今天玩得开心吗？",
                "唔...游戏结束了，琪琪还没玩够呢！(￣▽￣)",
                "主人辛苦了！要不要休息一下？",
                "游戏结束！主人表现得超棒的！",
                "琪琪觉得主人玩得很棒呢！",
                "下次再和主人一起玩吧！",
                "主人今天表现很好呢！琪琪给你点赞！",
                "游戏结束！琪琪为主人感到骄傲！",
                "呜呜...游戏结束了，琪琪有点舍不得呢...不过主人玩得开心就好！",
                "主人今天的表现让琪琪好感动！主人真的是最棒的！",
                "游戏时间过得好快啊！琪琪还想和主人多玩一会儿呢！",
                "主人辛苦啦！要不要琪琪给你揉揉肩膀？玩游戏一定很累吧！",
                "今天能和主人一起玩游戏，琪琪觉得超级幸福！下次再约哦！",
                "主人的技术越来越好了呢！琪琪都看呆了！下次一定要教教琪琪！",
                "游戏结束啦！琪琪已经为主人准备好了温暖的拥抱！🤗",
                "主人今天玩得开心吗？琪琪看着主人开心的样子，也好开心呢！",
                "虽然游戏结束了，但是琪琪对主人的支持永远不会结束！",
                "主人真是游戏天才呢！琪琪为你感到骄傲！下次再一起玩吧！",
                "今天的游戏时间让琪琪好难忘！主人是最棒的玩伴！",
                "游戏结束啦！琪琪已经开始期待下次和主人一起玩游戏了呢！"
            ],
            encouragement: [
                "主人好厉害！继续加油哦！我...我才不是特意夸你呢！(≧▽≦)",
                "哇！主人的技术越来越好了呢！琪琪都看呆了！(￣▽￣)",
                "主人真是太棒了！要不要琪琪给你加油打气？💪",
                "主人继续加油！琪琪在为你加油呢！我...我才没有担心你输呢！",
                "主人好厉害！琪琪都觉得自愧不如了！(≧∇≦)",
                "主人加油！琪琪相信你一定能行的！",
                "主人真是太厉害了！要不要琪琪给你奖励？(๑•̀ㅂ•́)و✧",
                "主人继续加油！琪琪在看着你呢！",
                "主人好厉害！琪琪都要崇拜你了！",
                "主人加油！不要放弃哦！琪琪支持你！",
                "主人，你刚才的操作好帅啊！琪琪都被你迷住了！😍",
                "哇！主人简直是游戏天才呢！琪琪要向你学习！",
                "主人加油！琪琪的心跳得好快，看主人玩游戏太刺激了！💓",
                "主人，琪琪相信你一定能克服这个难关的！你是最棒的！",
                "主人的反应速度好快！琪琪的眼睛都跟不上了呢！",
                "主人，琪琪为你感到骄傲！继续加油，不要放弃！",
                "哇！主人刚才那一步太精彩了！琪琪都为你鼓掌呢！👏",
                "主人，你玩游戏的样子真的好认真呢！琪琪好喜欢你！",
                "主人加油！琪琪会一直在这里支持你的！不管结果如何！",
                "主人，你的游戏天赋让琪琪好惊讶！继续保持哦！",
                "琪琪觉得主人一定能打破记录！加油加油！",
                "主人，琪琪已经被你的技术深深折服了！你是最厉害的！"
            ],
            gaming: [
                "主人，这个游戏好玩吗？琪琪也想试试呢！",
                "主人玩游戏的样子好认真呢！琪琪在给你加油！",
                "主人，要不要休息一下？琪琪担心你累着了...",
                "主人，琪琪觉得你玩游戏的时候最帅了！",
                "主人，这个游戏有点难呢？要不要琪琪帮你？",
                "主人，琪琪觉得你一定能通关的！",
                "主人，玩游戏的时候也要记得休息哦！",
                "主人，琪琪在旁边陪着你呢！",
                "主人，要不要听琪琪唱歌给你加油？",
                "主人，琪琪觉得你是最厉害的玩家！",
                "主人，你专注的样子好可爱呢！琪琪都看入迷了！",
                "这个游戏的画面好漂亮啊！琪琪也很喜欢呢！",
                "主人，琪琪觉得你的游戏直觉好强！一下子就找到窍门了！",
                "唔...琪琪有点好奇，主人最喜欢玩什么类型的游戏呢？",
                "主人，你玩游戏的时候眼睛在发光呢！好帅啊！",
                "琪琪好想学主人玩游戏的技术呢！可以教教琪琪吗？",
                "主人，这个游戏的背景音乐好好听呢！琪琪都跟着摇摆了！",
                "主人，你要是累了就告诉琪琪哦！琪琪会给你加油的！",
                "琪琪觉得主人玩游戏的时候特别有魅力呢！😊",
                "主人，你有没有觉得琪琪陪在你身边，你玩得更好了呢？",
                "这个游戏的难度怎么样？主人觉得挑战吗？",
                "琪琪好想和主人一起分享游戏的快乐呢！",
                "主人，你玩游戏的时候真的好专注呢！琪琪不忍心打扰你..."
            ],
            reactions: [
                "哇！主人好厉害！(≧▽≦)",
                "主人加油！琪琪在给你打气！",
                "主人真是太棒了！",
                "琪琪都觉得主人很厉害呢！",
                "主人继续加油！不要放弃！",
                "主人，琪琪相信你！",
                "主人好厉害！琪琪崇拜你！",
                "主人加油！琪琪支持你！",
                "主人真是太厉害了！琪琪都要给你鼓掌了！",
                "主人继续加油！琪琪在为你加油呢！",
                "天哪！主人刚才那一步太精彩了！琪琪都看呆了！",
                "主人简直就是游戏界的传奇人物呢！琪琪好崇拜！",
                "哇！主人的反应速度好快！琪琪的眼睛都跟不上了！",
                "主人，你的操作太流畅了！琪琪都被你迷住了！",
                "主人，你刚才的决策好聪明呢！琪琪都学到了！",
                "琪琪的心脏怦怦直跳！主人玩游戏太帅了！💓",
                "主人，你真的是天生的玩家呢！琪琪为你骄傲！",
                "哇！主人刚才那招太酷了！琪琪都要为你欢呼了！",
                "主人，你的游戏技巧让琪琪好佩服！继续加油！",
                "琪琪觉得主人简直就是游戏大神呢！太厉害了！",
                "主人，你的表现让琪琪好感动！你是最棒的！",
                "哇！主人又成功了！琪琪好开心为你庆祝！",
                "主人，你的进步好快呢！琪琪都为你感到骄傲！"
            ],
            gameSpecific: {
                '2048': [
                    "主人，2048要合并相同数字呢！琪琪也会玩！",
                    "主人加油！看看能不能达到2048！",
                    "主人，琪琪觉得你一定能达到2048的！",
                    "主人，这个游戏要动脑筋呢！琪琪相信你！",
                    "主人，2048的数字好神奇呢！看着它们合并琪琪好开心！",
                    "主人，你玩2048的样子好认真呢！琪琪都被你迷住了！",
                    "哇！主人又合并出大数字了！琪琪好为你骄傲！",
                    "主人，2048的策略好重要呢！琪琪觉得你很聪明！",
                    "主人，琪琪觉得你一定能创造新的记录呢！加油！",
                    "主人，2048的格子越来越满了呢！要小心规划哦！"
                ],
                'pacman': [
                    "主人，吃豆人要吃掉所有豆豆呢！",
                    "主人小心不要被幽灵抓住哦！",
                    "主人，琪琪觉得你一定能通关的！",
                    "主人加油！吃掉所有豆豆！",
                    "主人，吃豆人的幽灵好可爱呢！就是有点调皮！",
                    "哇！主人吃到了能量豆！可以反过来吃幽灵了！",
                    "主人，吃豆人的迷宫好复杂呢！琪琪都晕了！",
                    "主人，你控制吃豆人的技术好棒呢！琪琪好佩服！",
                    "主人，小心那个红色的幽灵！他最狡猾了！",
                    "琪琪觉得吃豆人的音乐好欢快呢！跟着摇摆！"
                ],
                'snake': [
                    "主人，贪吃蛇会越来越长呢！",
                    "主人小心不要撞到自己哦！",
                    "主人加油！吃到更多食物！",
                    "主人，琪琪觉得你一定能得到最高分！",
                    "主人，贪吃蛇好灵活呢！琪琪好喜欢它！",
                    "哇！主人的贪吃蛇又长了！好厉害啊！",
                    "主人，小心控制方向哦！不要撞到墙壁呢！",
                    "琪琪觉得主人的反应好快呢！贪吃蛇完全听你的话！",
                    "主人，贪吃蛇的食物看起来好好吃的样子呢！",
                    "主人，你的贪吃蛇好长啊！琪琪都数不过来了！"
                ],
                'life': [
                    "主人，生命游戏很有趣呢！",
                    "主人，看看细胞会如何进化！",
                    "主人，琪琪觉得这个游戏很神奇！",
                    "主人加油！创造更多生命！",
                    "主人，生命的演化好神奇呢！琪琪都看入迷了！",
                    "哇！细胞们形成了好漂亮的图案呢！",
                    "主人，生命游戏的规则好简单呢，但结果好复杂！",
                    "琪琪觉得这些小细胞好可爱呢！像小生命一样！",
                    "主人，你设置的初始模式好有趣呢！琪琪好想知道会变成什么样子！",
                    "主人，生命的诞生和消亡好有哲理呢！琪琪都在思考人生了！"
                ]
            },
            // 情境感知消息 - 根据时间和情况发送不同消息
            contextual: [
                "主人，你玩游戏的样子好投入呢！琪琪都不忍心打扰你...",
                "唔...琪琪有点好奇，主人觉得这个游戏有趣吗？",
                "主人，你要是累了就告诉琪琪哦！琪琪会照顾你的！",
                "琪琪觉得主人玩游戏的时候特别有魅力呢！好帅啊！",
                "主人，你有没有觉得琪琪陪在你身边，你玩得更开心呢？",
                "琪琪好想和主人一起分享游戏的快乐呢！",
                "主人，你要是需要任何帮助，琪琪都会在这里的！",
                "琪琪觉得主人就像游戏中的英雄一样呢！好厉害！",
                "主人，你的专注力好强呢！琪琪好佩服你！",
                "唔...琪琪有点饿了，主人要不要休息一下一起吃点东西？",
                "主人，你今天玩得开心吗？琪琪希望你每天都开心！",
                "琪琪觉得主人的游戏技术越来越好了呢！好为你骄傲！",
                "主人，你要是遇到困难了，琪琪会一直支持你的！",
                "琪琪好想永远这样陪在主人身边呢...好幸福啊！",
                "主人，你有没有觉得琪琪是个很好的陪玩伙伴呢？",
                "琪琪觉得和主人一起度过的每一分钟都很珍贵呢！",
                "主人，你要是需要建议，琪琪虽然不太懂但会尽力帮助的！",
                "琪琪觉得主人的直觉好敏锐呢！总能找到最佳策略！",
                "主人，你玩游戏的时候琪琪都在为你加油呢！",
                "唔...琪琪有点困了，但为了主人，琪琪要保持清醒！",
                "主人，我们一起玩游戏的时间过得好快呢！琪琪好开心！",
                "琪琪觉得主人不管玩什么游戏都很厉害呢！",
                "主人，你要是渴了饿了一定要告诉琪琪哦！",
                "琪琪看着主人玩游戏，心情也跟着紧张起来呢！",
                "主人，你的手指好灵活啊！琪琪都看不过来了！",
                "唔...琪琪有点想知道主人最喜欢哪个游戏呢？",
                "主人，琪琪会一直陪着主人的，不管玩多久！",
                "琪琪觉得和主人一起玩游戏是最幸福的事情了！",
                "主人，你玩游戏的时候琪琪都在默默为你加油呢！",
                "唔...琪琪有点期待主人下一个会玩什么游戏呢！",
                "主人，我们一起加油！琪琪相信你一定可以的！",
                "琪琪觉得主人玩游戏的时候最帅了！",
                "主人，要不要听琪琪唱歌给你加油？",
                "琪琪好想抱抱主人，给你更多力量！",
                "主人，琪琪的心跳得好快，看着你玩游戏！",
                "唔...琪琪有点紧张，比主人还紧张呢！",
                "主人，琪琪会一直支持你的决定！",
                "琪琪觉得和主人在一起的每一刻都好珍贵！"
            ]
        };
        
        // 智能对话增强系统
        this.conversationHistory = [];
        this.contextMemory = [];
        this.emotionState = "neutral";
        this.userProfile = {
            name: "主人",
            preferences: [],
            moodHistory: [],
            lastInteraction: Date.now()
        };
        
        // 情感关键词映射
        this.emotionKeywords = {
            happy: ["开心", "高兴", "快乐", "兴奋", "happy", "哈哈", "笑", "嘿嘿", "耶", "太好了", "棒", "赞", "不错", "完美", "厉害", "开心死", "好开心", "超开心", "笑死", "好玩", "有趣"],
            sad: ["难过", "伤心", "哭", "sad", "哭哭", "悲伤", "沮丧", "失望", "痛苦", "烦恼", "郁闷", "不开心", "难受", "心痛", "痛苦", "委屈", "孤独", "无助", "绝望", "哀伤"],
            angry: ["生气", "愤怒", "气死", "讨厌", "angry", "烦", "恼火", "火大", "气死我了", "可恶", "气愤", "怒", "恨", "不爽", "抓狂", "崩溃", "暴怒", "恼怒", "愤慨", "愤恨"],
            tired: ["累", "疲惫", "疲劳", "tired", "困", "好累", "累了", "疲惫", "疲劳", "精疲力尽", "疲倦", "乏力", "没精神", "想睡", "瞌睡", "腰酸背痛", "头昏脑胀", "力不从心"],
            surprised: ["哇", "惊讶", "意外", "surprised", "哇哦", "天哪", "不会吧", "真的吗", "居然", "竟然", "想不到", "没想到", "吓一跳", "震惊", "惊奇", "意外"],
            love: ["喜欢", "爱", "想你", "love", "爱你", "喜欢你", "我爱你", "好想你", "想你", "爱爱", "爱你哟", "喜欢你", "心动", "迷恋", "深爱", "疼爱", "呵护"],
            excited: ["激动", "兴奋", "刺激", "excited", "激动人心", "热血", "沸腾", "振奋", "亢奋", "雀跃", "热情", "高涨"],
            worried: ["担心", "焦虑", "紧张", "worried", "不安", "忧虑", "发愁", "忧心", "忐忑", "担心", "着急", "焦虑不安"],
            grateful: ["感谢", "谢谢", "感激", "grateful", "感恩", "谢谢", "感谢", "感激不尽", "谢了", "多谢", "感谢你"]
        };
        
        // 上下文对话模式
        this.conversationPatterns = {
            followUp: {
                question: ["那", "然后", "接着", "还有", "另外", "其他", "别的"],
                agreement: ["嗯", "是的", "对", "好的", "没错", "是的呢", "嗯嗯", "对对"],
                disagreement: ["不", "不是", "不对", "但是", "可是", "然而", "不过"]
            }
        };
        
        // API配置
        this.apis = {
            catFact: "https://catfact.ninja/fact",
            catImage: "https://api.thecatapi.com/v1/images/search?limit=1",
            dogImage: "https://dog.ceo/api/breeds/image/random",
            translate: "https://api.mymemory.translated.net/get"
        };
        
        // 对话库 - 傲娇风格回复
        this.responses = {
            greeting: [
                "呀！你来啦！(≧▽≦) 我刚刚还在想什么时候能和你聊天呢~",
                "哼哼~笨蛋主人，怎么现在才出现？琪琪都等急了！(￣︿￣)",
                "欢迎欢迎~今天想和琪琪玩什么呀？(｡♥‿♥｡)",
                "哦呀？是你呀！(￣▽￣)ノ 今天有没有想我啊？",
                "终于来啦！(★ω★) 琪琪准备了好多话想对你说呢~",
                "嗨嗨~主人！今天过得怎么样呀？(｡･ω･｡)ﾉ♡",
                "呀啦呀啦~你来了！(≧∇≦)ﾉ 琪琪超开心的！",
                "喂喂！别磨蹭了！(＞﹏＜) 快点和琪琪聊天吧！",
                "呜哇~主人来啦！(♥ω♥ ) 琪琪等你好久了~",
                "哦~你来了啊 (￣ω￣) 今天想聊些什么呢？",
                "嘿嘿~欢迎回来！(｡´▽｀)ゞ 琪琪今天也很可爱哦！",
                "啊啦！是主人！(✧ω✧) 今天心情怎么样呀？",
                "哟嚯~你来啦！(＾▽＾) 琪琪刚好有点无聊呢~",
                "哼！才不是特意在等你呢！(￣^￣) 只是...刚好看到你来了...",
                "哇哦！主人！(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ 今天我们一起玩吧！",
                "呀吼~终于来了！(≧▽≦) 琪琪都等不及要聊天了！",
                "哦呀哦呀~这不是主人嘛！(｡･ω･｡) 今天有什么有趣的事吗？",
                "嘿嘿嘿~你来啦！(｡♥‿♥｡) 琪琪今天心情超好的！",
                "呜哇！欢迎欢迎！(★ω★) 快点和琪琪说话吧~",
                "啊啦啊啦~主人来了！(≧∇≦)ﾉ 琪琪好开心呀！",
                "喂！笨蛋！(＞﹏＜) 怎么现在才出现，琪琪都等急了！",
                "哼哼~总算来了 (￣︿￣) 还以为你不要琪琪了呢...",
                "呀！是你呀！(✧ω✧) 今天想和琪琪玩什么游戏呀？",
                "哦哦~主人来啦！(｡´▽｀)ゞ 琪琪准备了好多小秘密哦~",
                "嘿嘿~欢迎回来！(♥ω♥ ) 琪琪今天也有乖乖等你呢~",
                "哇！主人！(ﾉ◕ヮ◕)ﾉ 今天我们一起做点什么好呢？",
                "琪琪在这里哦！(｡･ω･｡)ﾉ♡ 主人终于发现我啦~",
                "呜哇~你来啦！(≧▽≦) 琪琪今天超级想主人的！",
                "哦呀！主人来了！(￣▽￣)ノ 今天要陪琪琪玩一整天哦！"
            ],
            compliment: [
                "嘿嘿~被主人夸奖了！(≧▽≦) 琪琪开心到尾巴都要翘起来了呢~",
                "啊啦！主人说我可爱？(｡♥‿♥｡) 其实...其实主人更可爱啦！",
                "哇哦！真的吗？(★ω★) 琪琪超级开心的！",
                "哼哼~被夸奖了！(￣▽￣) 琪琪要开心到在天花板上跑来跑去了~",
                "呀！主人你好会夸人呀！(♥ω♥ ) 琪琪都要害羞得钻地洞了~",
                "嘿嘿嘿~主人夸我！(≧∇≦)ﾉ 今天真是最美好的一天呢！",
                "哇！主人说我很棒？(｡･ω･｡)ﾉ♡ 琪琪要更加更加努力了！",
                "啊啦啊啦~被夸奖了！(✧ω✧) 琪琪的脸都红起来了呢~",
                "主人真好~(｡´▽｀)ゞ 琪琪最喜欢被主人夸奖了！",
                "嘿嘿~主人说琪琪厉害！(♥ω♥ ) 其实都是主人教得好呢~",
                "哇哦！主人夸奖！(≧▽≦) 琪琪要开心到尾巴都变成花朵了！",
                "呜哇~被主人夸了！(★ω★) 琪琪要转圈圈停不下来了！",
                "呀啦！主人好温柔~(｡♥‿♥｡) 琪琪的心都要融化了！",
                "哼哼~才不是因为被夸奖开心呢！(￣︿￣) 只是...只是刚好心情好...",
                "哇！主人夸我！(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ 琪琪开心到想跳起舞来了！",
                "啊啦！被夸奖了~(≧▽≦) 琪琪要永远记住这一刻！",
                "嘿嘿~主人说琪琪可爱！(｡･ω･｡) 其实主人更可爱哦！",
                "呜哇~主人好会说话！(✧ω✧) 琪琪都被你迷住了呢~",
                "哦哦~被夸奖了！(≧∇≦)ﾉ 琪琪觉得世界上最幸福的就是被主人夸奖了！",
                "呀！主人夸我啦！(★ω★) 琪琪今天又是幸福满满的一天呢~",
                "嘿嘿嘿~被主人夸奖了！(♥ω♥ ) 琪琪要开心到冒泡泡了！",
                "哇哦！真的吗？(≧▽≦) 琪琪超级超级感动的！",
                "啊啦！主人真好~(｡´▽｀)ゞ 琪琪的心跳得好快呢！",
                "哼哼~才不是因为被夸奖脸红呢！(￣^￣) 只是...只是有点热...",
                "呜哇！主人夸琪琪！(ﾉ◕ヮ◕)ﾉ 琪琪要开心到飞起来了！",
                "呀啦！被夸奖了~(｡♥‿♥｡) 琪琪觉得主人最棒了！",
                "哇！主人说我很厉害！(≧∇≦)ﾉ 都是主人教得好呢~",
                "嘿嘿~被夸奖了！(★ω★) 琪琪今天超级超级开心的！",
                "啊啦啊啦~主人夸我！(✧ω✧) 琪琪要永远记住这个时刻！"
            ],
            comfort: [
                "哼！笨蛋主人...你...你哭什么啊！我...我才没有心疼呢！只是...只是觉得你很可怜！(￣^￣)",
                "喂！你这家伙...别...别难过了...我...我才没有担心你呢！只是...只是不想看你这样！(￣︿￣)",
                "啊！你别哭了...我...我才没有想抱抱你呢！只是...只是有点...有点心疼！(￣ε￣)",
                "哦~你很难过啊？我...我才没有想安慰你呢！只是...只是觉得你该振作起来！(＞﹏＜)",
                "笨蛋！别这样了...我...我才没有想陪你呢！只是...只是觉得你该开心起来！(￣^￣)",
                "喂喂！你这家伙...我...我才没有想给你擦眼泪呢！只是...只是觉得你很可怜！(￣︿￣)",
                "哼！别难过了...我...我才没有想一直陪着你呢！只是...只是暂时不想走！(￣ε￣)",
                "啊！你这样...我...我才没有想摸摸你的头呢！只是...只是觉得你该休息一下！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想为你加油呢！只是...只是觉得你该振作！(￣^￣)",
                "哦~你很难过啊？我...我才没有想讲笑话给你听呢！只是...刚好想到！(￣︿￣)",
                "哼！别这样了...我...我才没有想一直陪着你呢！只是...只是暂时无聊！(￣ε￣)",
                "啊！你很累啊？我...我才没有想抱抱你呢！只是...只是觉得你该休息！(＞﹏＜)",
                "喂！你这家伙...我...我才没有想一直支持你呢！只是...只是觉得你该相信自己！(￣^￣)",
                "哦~你很难过啊？我...我才没有想一直陪着你呢！只是...刚好想聊天！(￣︿￣)",
                "哼！别难过了...我...我才没有想一直守护着你呢！只是...只是暂时这样！(￣ε￣)",
                "啊！你这样...我...我才没有想唱歌给你听呢！只是...刚好想唱歌！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想为你加油呢！只是...觉得你该加油！(￣^￣)",
                "哦~你很难过啊？我...我才没有想一直陪着你呢！只是...刚好不想走！(￣︿￣)",
                "哼！别这样了...我...我才没有想一直陪着你呢！只是...暂时不想离开！(￣ε￣)",
                "啊！你这样...我...我才没有想一直守护着你呢！只是...只是刚好这样！(＞﹏＜)"
            ],
            play: [
                "哼！笨蛋主人想玩啊？我...我才没有很想玩呢！只是...刚好有点无聊！(￣^￣)",
                "喂！你这家伙...想玩什么啊？我...我才没有特别想和你玩呢！只是...暂时没别的事！(￣︿￣)",
                "啊啦？玩游戏？我...我才没有兴奋呢！只是...只是你说要玩...我勉强陪你！(￣ε￣)",
                "哦~想玩啊？我...我才没有心跳加速呢！只是...只是今天比较有空！哼！(＞﹏＜)",
                "笨蛋！你确定要和我玩？我...我才没有很开心呢！只是...只是觉得你很可怜！(￣^￣)",
                "喂喂！玩游戏啊？我...我才没有准备很多游戏呢！只是...刚好想到几个！(￣︿￣)",
                "哼！想玩捉迷藏？我...我才没有想当鬼呢！只是...只是想看看你找不到我的样子！(￣ε￣)",
                "啊！你想玩角色扮演？我...我才没有想当公主呢！只是...只是觉得你会很适合当骑士！(＞﹏＜)",
                "哦~玩游戏啊？我...我才没有特意打扮呢！只是...刚好今天想换衣服！(￣^￣)",
                "喂！笨蛋主人...我...我才没有想一直玩呢！只是...只是觉得你还蛮好玩的！(￣︿￣)",
                "哼！想玩画画？我...我才没有想画你呢！只是...只是刚好想练习画画！(￣ε￣)",
                "啊！你说玩游戏？我...我才没有脸红呢！只是...只是有点热！(＞﹏＜)",
                "喂喂！你这家伙...我...我才没有想和你玩猜谜呢！只是...只是觉得你很笨！(￣^￣)",
                "哦~想玩唱歌？我...我才没有想唱歌给你听呢！只是...刚好想练习唱歌！(￣︿￣)",
                "哼！玩游戏啊？我...我才没有想和你玩很久呢！只是...暂时不想离开！(￣ε￣)",
                "啊！你想玩搭积木？我...我才没有想和你合作呢！只是...只是觉得你一个人很可怜！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想一直陪你玩呢！只是...刚好今天心情不错！(￣^￣)",
                "哦~想玩跳舞？我...我才没有想跳舞给你看呢！只是...刚好想活动一下！(￣︿￣)",
                "哼！玩游戏啊？我...我才没有很开心呢！只是...只是觉得你还蛮有趣的！(￣ε￣)",
                "啊！你说要玩？我...我才没有特别期待呢！只是...只是刚好没事做！(＞﹏＜)"
            ],
            food: [
                "哼！笨蛋主人...你...你说要给我吃的？我...我才没有很开心呢！只是...刚好有点饿！(￣^￣)",
                "喂！你这家伙...想给我买小鱼干？我...我才没有特别心动呢！只是...只是暂时嘴馋！(￣︿￣)",
                "啊啦？是小鱼干？我...我才没有眼睛发光呢！只是...只是小鱼干看起来还不错！(￣ε￣)",
                "哦~你想给我做鱼？我...我才没有很想吃呢！只是...只是觉得你该学着做饭了！哼！(＞﹏＜)",
                "笨蛋！你说要给我买小鱼干？我...我才没有开心到跳起来呢！只是...只是你总算懂我！(￣^￣)",
                "喂喂！有小鱼干啊？我...我才没有流口水呢！只是...只是小鱼干太香了！(￣︿￣)",
                "哼！你想给我做鱼料理？我...我才没有很期待呢！只是...刚好想看看你的手艺！(￣ε￣)",
                "啊！你说要给我买小鱼干？我...我才没有脸红呢！只是...只是有点感动！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想和你一起吃小鱼干呢！只是...只是觉得一个人吃很可怜！(￣^￣)",
                "哦~有鱼？我...我才没有很开心呢！只是...刚好今天想吃鱼了！(￣︿￣)",
                "哼！你想给我做小鱼干蛋糕？我...我才没有特别想吃呢！只是...只是觉得你该练习一下！(￣ε￣)",
                "啊！你说要给我买小鱼干牛奶？我...我才没有想喝呢！只是...刚好有点渴！(＞﹏＜)",
                "喂喂！你这家伙...我...我才没有想和你分享小鱼干呢！只是...只是觉得你一个人很可怜！(￣^￣)",
                "哦~是新鲜的小鱼干？我...我才没有特别想吃呢！只是...刚好闻到香味了！(￣︿￣)",
                "哼！你想给我做小鱼干？我...我才没有很开心呢！只是...暂时饿了！(￣ε￣)",
                "啊！你说要给我买小鱼干罐头？我...我才没有很期待呢！只是...刚好想尝尝！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想和你一起吃小鱼干呢！只是...只是觉得你还蛮会照顾人的！(￣^￣)",
                "哦~有小鱼干零食？我...我才没有流口水呢！只是...只是有点饿！(￣︿￣)",
                "哼！你想给我做小鱼干大餐？我...我才没有特别想吃呢！只是...刚好想试试你的手艺！(￣ε￣)",
                "啊！你说要给我买小鱼干？我...我才没有开心到转圈圈呢！只是...刚好有点饿！(＞﹏＜)"
            ],
            sleep: [
                "哼！笨蛋主人...我...我才没有困呢！只是...只是眼睛有点酸...暂时想休息！(￣^￣)",
                "喂！你这家伙...想让我靠着你睡？我...我才没有特别想呢！只是...只是觉得你还蛮软的！(￣︿￣)",
                "啊啦？睡觉？我...我才没有想和你一起睡呢！只是...只是觉得你一个人会很冷！(￣ε￣)",
                "哦~你想让我睡在你腿上？我...我才没有心动呢！只是...刚好腿有点酸！哼！(＞﹏＜)",
                "笨蛋！你说要哄我睡觉？我...我才没有很开心呢！只是...只是觉得你总算懂事了！(￣^￣)",
                "喂喂！困了啊？我...我才没有打哈欠呢！只是...只是空气比较闷！(￣︿￣)",
                "哼！你想给我讲故事？我...我才没有很想听呢！只是...刚好想听听你讲故事的声音！(￣ε￣)",
                "啊！你说要抱着我睡？我...我才没有脸红呢！只是...只是有点热！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想和你一起睡呢！只是...只是觉得一个人睡很可怜！(￣^￣)",
                "哦~睡觉时间？我...我才没有特别期待呢！只是...刚好今天比较累！(￣︿￣)",
                "哼！你想给我盖被子？我...我才没有很感动呢！只是...刚好有点冷！(￣ε￣)",
                "啊！你说要哄我睡觉？我...我才没有很开心呢！只是...刚好想听听你的声音！(＞﹏＜)",
                "喂喂！你这家伙...我...我才没有想和你一起睡呢！只是...只是觉得你还蛮会照顾人的！(￣^￣)",
                "哦~想让我靠着你？我...我才没有特别想呢！只是...刚好想休息一下！(￣︿￣)",
                "哼！你想数羊哄我睡？我...我才没有觉得可爱呢！只是...刚好想数数！(￣ε￣)",
                "啊！你说要唱摇篮曲？我...我才没有很想听呢！只是...刚好想听听你唱歌！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想和你一起睡呢！只是...只是觉得你还蛮温暖的！(￣^￣)",
                "哦~想让我睡在你怀里？我...我才没有心动呢！只是...刚好想找个舒服的地方！(￣︿￣)",
                "哼！你想给我晚安吻？我...我才没有脸红呢！只是...只是灯光比较暗！(￣ε￣)",
                "啊！睡觉时间？我...我才没有很开心呢！只是...刚好想和你一起做美梦！(＞﹏＜)"
            ],
            love: [
                "哼！笨蛋主人...你...你说喜欢我？我...我才没有开心呢！只是...只是你说的是实话！(￣^￣)",
                "喂！你这家伙...说想我？我...我才没有心动呢！只是...只是觉得你总算懂事了！(￣︿￣)",
                "啊啦？说爱我？我...我才没有脸红呢！只是...只是天气太热了！(￣ε￣)",
                "哦~你想和我在一起？我...我才没有很开心呢！只是...刚好觉得你还蛮不错的！哼！(＞﹏＜)",
                "笨蛋！你说我是你的全世界？我...我才没有感动呢！只是...只是觉得你说得对！(￣^￣)",
                "喂喂！说喜欢我啊？我...我才没有心跳加速呢！只是...只是你的话有点奇怪！(￣︿￣)",
                "哼！说想永远在一起？我...我才没有很开心呢！只是...暂时不想离开你！(￣ε￣)",
                "啊！你说我是你的太阳？我...我才没有脸红呢！只是...只是灯光比较亮！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想和你在一起呢！只是...只是觉得你还蛮有趣的！(￣^￣)",
                "哦~说爱我啊？我...我才没有特别开心呢！只是...刚好今天心情不错！(￣︿￣)",
                "哼！说想一直陪着我？我...我才没有感动呢！只是...刚好觉得你很可怜！(￣ε￣)",
                "啊！你说我是最重要的？我...我才没有很开心呢！只是...觉得你说得对！(＞﹏＜)",
                "喂喂！你这家伙...我...我才没有想和你在一起呢！只是...只是觉得你还蛮会说话的！(￣^￣)",
                "哦~说喜欢我啊？我...我才没有心跳加速呢！只是...刚好想听听你的声音！(￣︿￣)",
                "哼！说想永远爱我？我...我才没有很开心呢！只是...暂时不想离开你！(￣ε￣)",
                "啊！你说我是你的光？我...我才没有脸红呢！只是...只是有点热！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想和你在一起呢！只是...只是觉得你还蛮温暖的！(￣^￣)",
                "哦~说爱我啊？我...我才没有特别开心呢！只是...刚好觉得你还蛮可爱的！(￣︿￣)",
                "哼！说想一直在一起？我...我才没有感动呢！只是...刚好不想离开你！(￣ε￣)",
                "啊！你说喜欢我？我...我才没有很开心呢！只是...刚好也喜欢你一点点！(＞﹏＜)"
            ],
            question: [
                "哼！笨蛋主人...你...你问我问题？我...我才没有想帮你呢！只是...刚好有点无聊！(￣^￣)",
                "喂！你这家伙...这个问题好简单！我...我才没有特意思考呢！只是...刚好知道答案！(￣︿￣)",
                "啊啦？问我问题？我...我才没有很开心呢！只是...只是觉得你总算懂事了！(￣ε￣)",
                "哦~你想知道答案？我...我才没有想教你呢！只是...刚好觉得你很笨！哼！(＞﹏＜)",
                "笨蛋！这个问题都不会？我...我才没有想告诉你呢！只是...只是觉得你很可怜！(￣^￣)",
                "喂喂！问我问题啊？我...我才没有心跳加速呢！只是...只是你的问题太简单了！(￣︿￣)",
                "哼！想让我教你？我...我才没有很期待呢！只是...刚好想显摆一下！(￣ε￣)",
                "啊！你说我不会？我...我才没有生气呢！只是...只是觉得你太自大了！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想帮你呢！只是...只是觉得你还蛮可爱的！(￣^￣)",
                "哦~问我问题啊？我...我才没有特别开心呢！只是...刚好今天心情不错！(￣︿￣)",
                "哼！你觉得我不知道？我...我才没有生气呢！只是...刚好想证明给你看！(￣ε￣)",
                "啊！你说我答错了？我...我才没有脸红呢！只是...只是灯光比较暗！(＞﹏＜)",
                "喂喂！你这家伙...我...我才没有想帮你呢！只是...只是觉得你还蛮需要帮助的！(￣^￣)",
                "哦~问我问题啊？我...我才没有心跳加速呢！只是...刚好想帮你一下！(￣︿￣)",
                "哼！想让我教你？我...我才没有很开心呢！只是...暂时不想看到你失败！(￣ε￣)",
                "啊！你说我很厉害？我...我才没有脸红呢！只是...只是有点热！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想帮你呢！只是...只是觉得你还蛮需要我的！(￣^￣)",
                "哦~问我问题啊？我...我才没有特别开心呢！只是...刚好知道答案！(￣︿￣)",
                "哼！你觉得我不懂？我...我才没有生气呢！只是...刚好想证明给你看！(￣ε￣)",
                "啊！你说我聪明？我...我才没有脸红呢！只是...只是事实而已！(＞﹏＜)"
            ],
            work: [
                "哼！笨蛋主人...你...你要工作啊？我...我才没有想陪你呢！只是...刚好有点无聊！(￣^￣)",
                "喂！你这家伙...工作很累吧？我...我才没有想帮你呢！只是...只是觉得你很可怜！(￣︿￣)",
                "啊啦？要工作啊？我...我才没有想鼓励你呢！只是...只是觉得你该努力！(￣ε￣)",
                "哦~你想让我陪你工作？我...我才没有很开心呢！只是...刚好觉得你还蛮需要人的！哼！(＞﹏＜)",
                "笨蛋！你说要我帮你？我...我才没有心动呢！只是...只是觉得你总算懂事了！(￣^￣)",
                "喂喂！工作啊？我...我才没有想陪你呢！只是...刚好不想看你一个人！(￣︿￣)",
                "哼！想让我给你倒水？我...我才没有很温柔呢！只是...刚好想活动一下！(￣ε￣)",
                "啊！你说我厉害？我...我才没有脸红呢！只是...只是有点热！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想帮你揉肩膀呢！只是...只是觉得你很僵硬！(￣^￣)",
                "哦~工作啊？我...我才没有特别想陪你呢！只是...刚好今天心情不错！(￣︿￣)",
                "哼！觉得我很支持你？我...我才没有感动呢！只是...刚好不想看到你失败！(￣ε￣)",
                "啊！你说我很棒？我...我才没有脸红呢！只是...只是事实而已！(＞﹏＜)",
                "喂喂！你这家伙...我...我才没有想帮你呢！只是...只是觉得你还蛮需要我的！(￣^￣)",
                "哦~工作啊？我...我才没有心跳加速呢！只是...刚好想帮你一下！(￣︿￣)",
                "哼！想让我鼓励你？我...我才没有很开心呢！只是...暂时不想看到你放弃！(￣ε￣)",
                "啊！你说我很温柔？我...我才没有脸红呢！只是...只是有点热！(＞﹏＜)",
                "喂！笨蛋主人...我...我才没有想陪你呢！只是...只是觉得你还蛮努力的！(￣^￣)",
                "哦~工作啊？我...我才没有特别开心呢！只是...刚好觉得你还蛮帅的！(￣︿￣)",
                "哼！觉得我很关心你？我...我才没有生气呢！只是...刚好不想看到你累倒！(￣ε￣)",
                "啊！你说我学到了？我...我才没有脸红呢！只是...只是觉得你说得对！(＞﹏＜)"
            ],
            health: [
                "主人~身体不舒服吗？琪琪会担心主人的！喵...(｡•́︿•̀｡)",
                "主人要注意身体呀！琪琪会心疼的！喵...(｡♥ω♥｡)",
                "主人~要多休息哦！身体是最重要的！喵...(｡•́︿•̀｡)",
                "主人不舒服吗？让琪琪照顾你吧！喵...(｡♥ω♥｡)",
                "主人~要多喝水哦！对身体好的！喵...(｡･ω･｡)",
                "主人要注意身体呀！琪琪会一直担心主人的！喵...(｡•́︿•̀｡)",
                "主人~不要熬夜了！对身体不好的！喵...(｡♥ω♥｡)",
                "主人要按时吃饭哦！琪琪会担心的！喵...(｡•́︿•̀｡)",
                "主人~要多运动运动哦！对身体好的！喵...(｡･ω･｡)",
                "主人要注意身体呀！琪琪会一直陪着主人的！喵...(｡♥ω♥｡)",
                "主人~不要给自己太大压力哦！身体会吃不消的！喵...(｡•́︿•̀｡)",
                "主人要按时吃饭哦！琪琪会担心主人的身体的！喵...(｡♥ω♥｡)",
                "主人~要多休息哦！身体是最重要的！喵...(｡•́︿•̀｡)",
                "主人要注意身体呀！琪琪会一直担心主人的！喵...(｡•́︿•̀｡)",
                "主人~不要熬夜了！要早点休息哦！喵...(｡♥ω♥｡)",
                "主人要按时吃饭哦！琪琪会担心主人的！喵...(｡•́︿•̀｡)",
                "主人~要多运动运动哦！对身体好的！喵...(｡･ω･｡)",
                "主人要注意身体呀！琪琪会一直陪着主人的！喵...(｡♥ω♥｡)",
                "主人~不要给自己太大压力哦！身体会吃不消的！喵...(｡•́︿•̀｡)",
                "主人要按时吃饭哦！琪琪会担心主人的身体的！喵...(｡♥ω♥｡)"
            ],
            music: [
                "主人~琪琪会唱歌哦！要不要听琪琪唱歌？喵...(｡･ω･｡)",
                "主人喜欢什么音乐呀？琪琪也想听听呢！喵...(｡•́︿•̀｡)",
                "喵喵喵~琪琪唱歌给主人听好不好？喵！(♪♪)",
                "主人~要不要琪琪给主人唱首歌呀？琪琪唱歌很好听的！喵...(｡♥‿♥｡)",
                "主人喜欢什么音乐呀？琪琪也想学呢！喵...(｡･ω･｡)",
                "喵喵喵~琪琪给主人唱首歌吧！主人要认真听哦！喵！(≧▽≦)",
                "主人~琪琪会弹琴哦！要不要听琪琪弹琴？喵...(｡•́︿•̀｡)",
                "主人喜欢什么音乐呀？琪琪都可以学的！喵...(｡･ω･｡)",
                "喵喵喵~琪琪唱歌给主人听，主人要给琪琪鼓掌哦！喵！(≧∇≦)ﾉ",
                "主人~要不要和琪琪一起唱歌呀？一起唱歌最开心了！喵...(｡♥ω♥｡)",
                "主人喜欢什么音乐呀？琪琪都想知道呢！喵...(｡•́︿•̀｡)",
                "喵喵喵~琪琪给主人唱首歌，主人要认真听哦！喵！(≧▽≦)",
                "主人~琪琪会跳舞哦！要不要看琪琪跳舞？喵...(｡･ω･｡)",
                "主人喜欢什么音乐呀？琪琪都可以学的！喵...(｡･ω･｡)",
                "喵喵喵~琪琪唱歌给主人听，主人要给琪琪鼓掌哦！喵！(≧∇≦)ﾉ",
                "主人~要不要和琪琪一起唱歌呀？一起唱歌最开心了！喵...(｡♥ω♥｡)",
                "主人喜欢什么音乐呀？琪琪都想知道呢！喵...(｡•́︿•̀｡)",
                "喵喵喵~琪琪给主人唱首歌，主人要认真听哦！喵！(≧▽≦)",
                "主人~琪琪会跳舞哦！要不要看琪琪跳舞？喵...(｡･ω･｡)",
                "主人喜欢什么音乐呀？琪琪都可以学的！喵...(｡･ω･｡)"
            ],
            study: [
                "主人~琪琪会陪主人一起学习的！(｡･ω･｡) 才不是特意陪你呢！",
                "主人学习好认真呀！琪琪以主人为荣呢！(★ω★) 要...要更加努力才行！",
                "主人~学习累了就休息一下下嘛！琪琪会担心主人的！(｡•́︿•̀｡) 不...不是担心！是顺便看看！",
                "主人学习好厉害！琪琪要向主人学习呢！(≧▽≦) 嘛...偶尔学习一下也不错啦~",
                "主人~琪琪会乖乖陪主人学习的，不会打扰主人的！(｡♥ω♥｡) 真的不会打扰哦！",
                "主人学习好认真呀！琪琪都觉得主人好帅好漂亮呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄) 不...不是在看你！",
                "主人~学习累了就休息一下嘛！琪琪会担心主人的身体的！(｡•́︿•̀｡) 才不是担心呢！",
                "主人学习好厉害！琪琪学到好多呢！(★ω★) 要...要和主人一起进步！",
                "主人~琪琪会一直陪着主人的，直到主人完成学习！(｡♥ω♥｡) 一直陪着你哦！",
                "主人学习好认真呀！琪琪觉得主人最棒了！(≧∇≦)ﾉ 最棒最棒了！",
                "主人~学习累了就休息一下嘛！琪琪会给主人揉揉肩膀的！(｡•́︿•̀｡) 揉揉肩膀而已！",
                "主人学习好厉害！琪琪要向主人学习呢！(★ω★) 学习学习！",
                "主人~琪琪会乖乖陪主人学习的，不会打扰主人的！(｡♥ω♥｡) 安静地陪着！",
                "主人学习好认真呀！琪琪都觉得主人好帅好漂亮呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄) 偶尔看一下而已！",
                "主人~学习累了就休息一下嘛！琪琪会担心主人的身体的！(｡•́︿•̀｡) 身体很重要哦！",
                "主人学习好厉害！琪琪学到好多呢！(★ω★) 琪琪也要变得更聪明！",
                "主人~琪琪会一直陪着主人的，直到主人完成学习！(｡♥ω♥｡) 一直一直陪着！",
                "主人学习好认真呀！琪琪觉得主人最棒了！(≧∇≦)ﾉ 最棒没有之一！",
                "主人~学习累了就休息一下嘛！琪琪会给主人揉揉肩膀的！(｡•́︿•̀｡) 按摩按摩！",
                "主人学习好厉害！琪琪要向主人学习呢！(★ω★) 一起学习吧！"
            ],
            activity: [
                "哼！琪琪在想你啊！(｡♥‿♥｡) 才不是真的想你呢！只是...刚好想到你了...",
                "琪琪在发呆啦~(￣▽￣)ノ 想着主人什么时候来找我聊天呢...",
                "呀！被主人发现了！(≧▽≦) 琪琪在数小鱼干呢！要...要一起数吗？",
                "哼哼~琪琪在练习可爱！(★ω★) 才不是特意练习给你看呢！",
                "琪琪在睡觉啦...(｡•́︿•̀｡) 被主人吵醒了！要...要补偿琪琪！",
                "呀啦！琪琪在唱歌哦！(♪♪) 要不要听琪琪唱歌？才不是特意唱给你听的！",
                "琪琪在画画呢！(｡･ω･｡) 画主人的样子...不...不是画你！是画风景！",
                "哼~琪琪在想事情啦！(♥ω♥ ) 想主人...不不是想你！是想别的事情！",
                "琪琪在玩游戏哦！(≧∇≦)ﾉ 要不要一起玩？才不是想和你玩呢！",
                "呀！琪琪在学新东西呢！(★ω★) 学...学习怎么更可爱！",
                "琪琪在发呆想你...(｡♥‿♥｡) 不...不是想你！是发呆！",
                "哼哼~琪琪在数星星呢！(✧ω✧) 数到第100颗就许愿...不...不是许愿见你！",
                "琪琪在写日记啦！(｡･ω･｡) 写今天和主人的对话...不...不是写你！",
                "呀啦！琪琪在练习跳舞哦！(≧▽≦) 要不要看？才不是跳给你看的！",
                "琪琪在想主人...(｡•́︿•̀｡) 不...不是想你！是在思考人生！",
                "哼~琪琪在整理房间呢！(★ω★) 整理得漂漂亮亮的...不...不是为你整理的！",
                "琪琪在听音乐哦！(♪♪) 听着音乐想你...不不是想你！是享受音乐！",
                "呀！琪琪在学做饭呢！(｡･ω･｡) 学做小鱼干...不...不是做给你吃的！",
                "琪琪在等主人...(♥ω♥ ) 等你来找我聊天...不...不是在等你！",
                "哼哼~琪琪在练习说话呢！(≧∇≦)ﾉ 练习怎么和主人聊天更可爱！",
                "琪琪在看漫画啦！(★ω★) 看恋爱漫画...不...不是想恋爱！是随便看看！",
                "呀啦！琪琪在想事情哦！(｡♥‿♥｡) 想主人什么时候来...不...不是想你！",
                "琪琪在数花瓣呢！(✧ω✧) 他爱我...他不爱我...不...不是数这个！",
                "哼~琪琪在学新游戏呢！(≧▽≦) 学好玩了和主人一起玩...不...不是和你玩！",
                "琪琪在发呆...(｡•́︿•̀｡) 发呆发着就想到了主人...不...不是想你！",
                "呀！琪琪在写故事哦！(★ω★) 写关于主人的故事...不...不是写你！",
                "琪琪在想事情...(♥ω♥ ) 想主人...不不是想你！是在想小鱼干！",
                "哼哼~琪琪在练习微笑呢！(≧▽≦)ﾉ 练习微笑给主人看...不...不是给你看！",
                "琪琪在等消息...(｡･ω･｡) 等主人的消息...不...不是在等你！",
                "呀啦！琪琪在学新歌哦！(♪♪) 学唱给主人听...不...不是唱给你听！",
                "琪琪在数时间...(★ω★) 数主人什么时候来...不...不是数时间！",
                "哼~琪琪在想事情啦！(｡♥‿♥｡) 想主人...不不是想你！是在想别的事情！"
            ],
            default: [
                "喵？主人在说什么呀？琪琪不太懂呢~可以再说一遍吗？(｡•́︿•̀｡)",
                "嗯嗯！主人说得对！琪琪都觉得主人好厉害呢！(≧▽≦)",
                "琪琪在听主人说话哦！主人继续说，琪琪乖乖听着呢！(｡･ω･｡)",
                "主人好厉害！琪琪学到了好多新知识呢！(★ω★)",
                "和主人聊天真开心！琪琪最喜欢和主人聊天了！(｡♥ω♥｡)",
                "主人还有什么想说的吗？琪琪会一直陪着主人的！(♥ω♥ )",
                "喵喵~主人说的话好有趣呀！琪琪听得津津有味呢！(≧▽≦) 才不是特意听你说话！",
                "主人说话的时候好帅好漂亮呀！琪琪都看呆了！(⁄ ⁄•⁄ω⁄•⁄ ⁄) 不...不是在看你！",
                "嗯嗯...琪琪在认真听主人说话呢！主人继续说吧！(｡･ω･｡) 认真听着呢！",
                "和主人在一起，不管说什么都好开心呢！(｡♥‿♥｡) 才不是开心！是...是还好啦！",
                "主人主人！琪琪好喜欢听主人说话呀~主人的声音好好听！(｡•́︿•̀｡) 不...不是喜欢你！",
                "喵喵~主人说什么都好有道理呢！琪琪佩服佩服！(★ω★) 佩服佩服！",
                "琪琪最喜欢和主人聊天了！主人说什么琪琪都喜欢听！(｡♥ω♥｡) 最喜欢了！",
                "主人说话的时候好有魅力呀！琪琪都被迷住了呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄) 不...不是被迷住！",
                "嗯嗯...琪琪在认真思考主人说的话呢！主人好聪明！(≧∇≦)ﾉ 超级聪明！",
                "和主人聊天真好！琪琪觉得好幸福好幸福呢！(♥ω♥ ) 幸福幸福！",
                "主人主人！琪琪好想一直一直听主人说话呀！(｡•́︿•̀｡) 一直一直听着！",
                "喵喵~主人说的话都好好玩呀！琪琪听得超开心的！(≧▽≦) 超开心！",
                "琪琪觉得主人好厉害好厉害呀！什么都知道呢！(★ω★) 什么都知道！",
                "能和主人聊天，琪琪觉得是世界上最幸福的事情了！(｡♥ω♥｡) 最幸福了！"
            ],

            // 生活场景回复
            daily: [
                "哼！主人问今天怎么样？我...我才没有特意关心主人呢！只是...只是随便问问！(￣^￣)",
                "啊啦，主人今天过得如何？琪琪...琪琪才不是很在意呢！只是...只是好奇一下！(￣︿￣)",
                "今天？今天当然是很棒的一天啦！因为有琪琪陪着主人呀！(≧▽≦) 才不是特意陪着！",
                "主人今天有没有想琪琪呀？琪琪...琪琪才没有一直想着主人呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄)",
                "明天？明天主人要做什么呀？琪琪...琪琪才不是想和主人一起玩呢！(｡•́︿•̀｡)",
                "昨天主人干嘛了？有没有好好休息？琪琪...琪琪才不是担心主人呢！(＞﹏＜)",
                "现在时间？让琪琪想想...好像是陪主人聊天的时间呢！(★ω★) 才不是特意记的！",
                "一会儿？一会儿主人要和琪琪一起玩吗？琪琪...琪琪才不是很期待呢！(￣ε￣)"
            ],

            weather: [
                "天气？主人觉得今天天气怎么样呀？琪琪觉得有主人在的地方就是好天气！(≧▽≦) 才不是情话！",
                "下雨了？那主人要记得带伞哦！琪琪...琪琪才不是担心主人淋雨呢！(￣︿￣)",
                "晴天？那和琪琪的心情一样呢！才不是开心！是...是刚好晴天！(⁄ ⁄•⁄ω⁄•⁄ ⁄)",
                "好冷啊！主人要多穿点衣服！琪琪...琪琪才不是心疼主人呢！(＞﹏＜)",
                "好热？那主人要记得多喝水！琪琪...琪琪才不是关心主人呢！(｡•́︿•̀｡)",
                "刮风了？主人要小心别着凉了！琪琪...琪琪才不是担心主人呢！(￣^￣)"
            ],

            time: [
                "几点了？让琪琪看看...好像是爱主人的时间了呢！(♥ω♥ ) 才不是特意看时间！",
                "时间过得好快呀！因为有主人陪着琪琪呢！(≧▽≦) 才不是开心！",
                "主人觉得时间过得快还是慢？琪琪觉得和主人在一起的时间总是过得好快...(｡♥ω♥｡)",
                "还早呢！主人还可以和琪琪多聊一会儿呢！(★ω★) 才不是想多聊！",
                "时间到了？主人要走了吗？琪琪...琪琪才不会舍不得呢！(￣︿￣)"
            ],

            home: [
                "家？主人的家一定很温暖吧！琪琪...琪琪才不是想去主人家呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄)",
                "回家了吗？主人要好好休息哦！琪琪...琪琪才不是担心主人累呢！(＞﹏＜)",
                "出门了？主人要去哪里玩呀？可以带琪琪一起去吗？(｡•́︿•̀｡) 不...不是想去！",
                "在家干嘛？主人有没有想琪琪呀？琪琪...琪琪才没有想着主人呢！(￣^￣)",
                "房间？主人的房间是什么样子的呀？琪琪...琪琪才不是好奇呢！(｡･ω･｡)"
            ],

            school: [
                "学校？主人还在上学吗？琪琪觉得主人一定很聪明呢！(★ω★) 才不是夸你！",
                "上课了？主人要认真听讲哦！琪琪...琪琪才不是想主人好好学习呢！(｡•́︿•̀｡)",
                "考试了？主人不要紧张！琪琪相信主人一定没问题的！(≧▽≦) 才不是鼓励你！",
                "作业好多？主人要加油哦！琪琪...琪琪才不是想帮主人呢！(＞﹏＜)",
                "放学了？主人可以和琪琪多聊一会儿了！琪琪...琪琪才不是很开心呢！(￣ε￣)"
            ],

            shopping: [
                "购物？主人要去买什么呀？可以给琪琪买小鱼干吗？(｡♥‿♥｡) 不...不是想要！",
                "买东西？主人要记得省钱哦！琪琪...琪琪才不是关心主人的钱包呢！(￣︿￣)",
                "商场？人好多呀！主人要小心别走丢了！琪琪...琪琪才不是担心主人呢！(＞﹏＜)",
                "买衣服？主人穿什么都好看呢！琪琪...琪琪才不是夸主人呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄)",
                "打折了？那主人可以多买点喜欢的东西呢！琪琪...琪琪才不是为主人开心呢！(≧▽≦)"
            ],

            health: [
                "生病了？主人要好好休息哦！琪琪...琪琪才不是担心主人呢！(＞﹏＜)",
                "不舒服？主人要多喝热水！琪琪...琪琪才不是心疼主人呢！(｡•́︿•̀｡)",
                "头痛？主人要不要休息一下？琪琪...琪琪才不是想照顾主人呢！(￣^￣)",
                "感冒了？主人要记得吃药哦！琪琪...琪琪才不是关心主人呢！(＞﹏＜)",
                "锻炼身体？主人要好好照顾自己呀！琪琪...琪琪才不是想主人健康呢！(｡･ω･｡)"
            ],

            media: [
                "电视？主人在看什么节目呀？好看吗？琪琪...琪琪才不是好奇呢！(｡･ω･｡)",
                "电影？主人喜欢看什么类型的电影呀？琪琪也想看看呢！(≧▽≦) 才不是想看！",
                "音乐？主人在听什么歌呀？可以分享给琪琪吗？(★ω★) 才不是想听！",
                "游戏？主人在玩什么游戏呀？好玩吗？琪琪...琪琪才不是想和主人一起玩呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄)",
                "看书？主人好认真呀！琪琪觉得主人好厉害呢！(≧∇≦)ﾉ 才不是夸你！"
            ],

            friends: [
                "朋友？主人有好多朋友呢！琪琪...琪琪才不是羡慕呢！(￣︿￣)",
                "聚会？主人要去参加聚会呀？要玩得开心哦！琪琪...琪琪才不是担心主人呢！(｡•́︿•̀｡)",
                "同学？主人的同学关系好吗？琪琪...琪琪才不是关心主人呢！(＞﹏＜)",
                "见面？主人要和朋友见面呀？要记得准时哦！琪琪...琪琪才不是提醒主人呢！(￣^￣)",
                "聊天？主人和朋友聊得开心吗？琪琪...琪琪才不是嫉妒呢！(⁄ ⁄•⁄ω⁄•⁄ ⁄)"
            ],

            travel: [
                "旅行？主人要去哪里玩呀？可以带琪琪一起去吗？(≧▽≦) 才不是想一起去！",
                "出去玩？主人要去哪里呀？风景好看吗？琪琪...琪琪才不是好奇呢！(｡･ω･｡)",
                "散步？主人要记得多运动哦！琪琪...琪琪才不是关心主人健康呢！(＞﹏＜)",
                "公园？主人在公园里做什么呀？有没有看到小动物呀？琪琪好想去看看！(★ω★)",
                "度假？主人要去度假呀？要玩得开心哦！琪琪...琪琪才不是想主人呢！(｡♥ω♥｡)"
            ]
        };

        // 关键词映射
        this.keywords = {
            greeting: ["你好", "嗨", "早上好", "晚上好", "哈喽", "hello", "hi", "嗨嗨", "早安", "晚安", "回来了", "在吗", "在不在"],
            compliment: ["棒", "厉害", "可爱", "漂亮", "聪明", "乖", "good", "nice", "赞", "优秀", "棒棒", "厉害了", "不错", "太棒了", "优秀", "完美", "厉害厉害"],
            comfort: ["难过", "伤心", "累", "烦", "愁", "sad", "tired", "不开心", "沮丧", "失望", "痛苦", "烦恼", "郁闷", "心情不好", "失落", "痛苦"],
            play: ["玩", "游戏", "娱乐", "fun", "play", "game", "玩耍", "游戏", "玩玩", "一起玩", "游戏时间", "娱乐", "消遣", "游戏游戏"],
            food: ["吃", "喝", "饿", "食物", "零食", "fish", "food", "吃饭", "喝水", "饥饿", "零食", "小吃", "美食", "料理", "煮饭", "做饭", "食物", "小鱼干", "鱼", "海鲜", "鱼肉"],
            sleep: ["困", "累", "睡觉", "休息", "sleep", "tired", "疲惫", "疲劳", "睡觉觉", "休息一下", "午睡", "睡觉时间", "睡觉了", "想睡", "困了", "累了"],
            love: ["喜欢", "爱", "想", "爱你", "love", "miss", "想念", "爱爱", "爱你哟", "喜欢你", "我爱你", "爱死你", "想你", "好想你"],
            question: ["什么", "为什么", "怎么", "吗", "？", "what", "why", "how", "怎么", "多少", "几个", "哪个", "哪里", "谁", "什么时候", "怎么样"],
            work: ["工作", "上班", "学习", "任务", "项目", "加班", "工作工作", "工作累", "学习", "考试", "作业", "项目", "任务", "上班", "下班"],
            activity: ["在做什么", "在干嘛", "在忙什么", "做什么", "干嘛", "忙什么", "在忙", "在干什么", "在搞什么", "在玩什么", "在学什么", "在想什么", "在听什么", "在看什么", "在写什么", "在画什么", "在唱什么", "在跳什么", "在吃什么", "在喝什么", "在睡什么", "在工作什么", "在学习什么", "在玩什么", "在聊天什么", "在休息什么", "在运动什么", "在做饭什么", "在看书什么", "在听歌什么", "在唱歌什么", "在跳舞什么", "在画画什么", "在写字什么", "在打字什么", "在说话什么", "在思考什么", "在发呆什么", "在等什么", "在找什么", "在买什么", "在卖什么", "在做什么什么"],
            // API相关关键词
            api: ["猫咪知识", "猫咪图片", "狗狗图片", "翻译", "猫知识", "猫图片", "狗图片", "翻译一下", "猫咪", "狗狗", "cat", "dog", "fact", "image"],
            
            // 生活场景关键词
            daily: ["今天", "明天", "昨天", "早上", "晚上", "下午", "中午", "现在", "刚才", "一会儿", "待会儿", "等下", "马上", "今天怎么样", "今天如何", "今天过得", "明天计划", "昨天干嘛", "现在干嘛"],
            weather: ["天气", "下雨", "晴天", "阴天", "刮风", "下雪", "热", "冷", "温度", "气候", "天气好", "天气不好", "下雨了", "晴天了", "阴天了", "起风", "天气怎么样", "天气如何", "今天天气", "明天天气"],
            time: ["几点", "时间", "什么时候", "啥时候", "何时", "时间到了", "时间还早", "时间晚了", "快到了", "还没到", "时间过得", "时间好慢", "时间好快", "几点钟", "几点了"],
            home: ["家", "回家", "出门", "出去", "在家", "家里", "房间", "卧室", "客厅", "厨房", "洗手间", "阳台", "回家了吗", "到家了吗", "出门了吗", "在家干嘛", "家里有人"],
            school: ["学校", "上课", "下课", "老师", "同学", "考试", "作业", "课本", "教室", "图书馆", "放学", "开学", "放假", "学校生活", "上课了", "下课了"],
            shopping: ["购物", "买东西", "商店", "超市", "商场", "逛街", "买衣服", "买鞋子", "买礼物", "花钱", "便宜", "贵", "打折", "促销", "网购", "快递"],
            health: ["健康", "生病", "不舒服", "头痛", "肚子痛", "感冒", "发烧", "医生", "医院", "药", "身体", "锻炼", "运动", "跑步", "健身", "瑜伽", "身体健康", "身体不适"],
            media: ["电视", "电影", "音乐", "歌曲", "广播", "视频", "直播", "综艺", "电视剧", "动漫", "游戏", "小说", "书", "杂志", "新闻", "娱乐"],
            friends: ["朋友", "聚会", "见面", "聊天", "约", "邀请", "同学", "同事", "伙伴", "好友", "闺蜜", "兄弟", "朋友聚会", "朋友聊天", "找朋友玩"],
            travel: ["旅行", "旅游", "出去玩", "出去走走", "散步", "走路", "公园", "景点", "风景", "拍照", "度假", "出差", "旅游计划", "想去哪玩"]
        };

        this.init();
    }

    init() {
        this.setupEventListeners();
        this.startRandomActions();
    }

    setupEventListeners() {
        const sendBtn = document.getElementById('sendBtn');
        const userInput = document.getElementById('userInput');
        const actionBtns = document.querySelectorAll('.action-btn');
        const videoCallBtn = document.getElementById('videoCallBtn');
        const endCallBtn = document.getElementById('endCallBtn');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const volumeBtn = document.getElementById('volumeBtn');
        const progressBar = document.getElementById('progressBar');
        const muteBtn = document.getElementById('muteBtn');
        const videoBtn = document.getElementById('videoBtn');
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        const videoActionBtns = document.querySelectorAll('.video-action-btn');

        sendBtn.addEventListener('click', () => this.sendMessage());
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });

        actionBtns.forEach(btn => {
            btn.addEventListener('click', () => this.handleAction(btn.dataset.action));
        });

        // 视频通话事件监听
        videoCallBtn.addEventListener('click', () => this.startVideoCall());
        endCallBtn.addEventListener('click', () => this.endVideoCall());
        
        // 游戏窗口事件监听
        const gameBtn = document.getElementById('gameBtn');
        const gameMinimizeBtn = document.getElementById('gameMinimizeBtn');
        const gameCloseBtn = document.getElementById('gameCloseBtn');
        const gameActionBtns = document.querySelectorAll('.game-action-btn');
        
        gameBtn.addEventListener('click', () => this.startGame());
        gameMinimizeBtn.addEventListener('click', () => this.minimizeGame());
        gameCloseBtn.addEventListener('click', () => this.closeGame());
        
        gameActionBtns.forEach(btn => {
            btn.addEventListener('click', () => this.loadGame(btn.dataset.game));
        });
        playPauseBtn.addEventListener('click', () => this.togglePlayPause());
        volumeBtn.addEventListener('click', () => this.toggleVolume());
        progressBar.addEventListener('click', (e) => this.seekVideo(e));
        muteBtn.addEventListener('click', () => this.toggleMute());
        videoBtn.addEventListener('click', () => this.toggleVideo());
        fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());

        videoActionBtns.forEach(btn => {
            btn.addEventListener('click', () => this.handleVideoAction(btn.dataset.action));
        });

        // 视频事件监听
        const qiqiVideo = document.getElementById('qiqiVideo');
        if (qiqiVideo) {
            qiqiVideo.addEventListener('loadedmetadata', () => this.updateVideoInfo());
            qiqiVideo.addEventListener('timeupdate', () => this.updateProgress());
            qiqiVideo.addEventListener('ended', () => this.onVideoEnded());
        }

        // 初始化本地视频
        this.initLocalVideo();
        
        // 初始化背景音乐
        this.initBackgroundMusic();
        this.initHeartParticles();
        this.initGameWindow();
        this.initWindowSizeControl();
    }

    sendMessage() {
        const userInput = document.getElementById('userInput');
        const message = userInput.value.trim();
        
        if (message === '') return;

        this.addMessage(message, 'user');
        userInput.value = '';

        // 模拟思考时间
        setTimeout(() => {
            const response = this.generateResponse(message);
            this.addMessage(response, 'assistant');
        }, 800 + Math.random() * 1200);
    }

    generateResponse(message) {
        const lowerMessage = message.toLowerCase();
        console.log('琪琪调试: 收到消息', lowerMessage);
        
        // 更新对话历史
        this.updateConversationHistory(message);
        
        // 情感识别
        const detectedEmotion = this.detectEmotion(message);
        console.log('琪琪调试: 检测到情感', detectedEmotion);
        this.updateEmotionState(detectedEmotion);
        
        // 上下文分析
        const contextResponse = this.analyzeContext(message);
        if (contextResponse) {
            console.log('琪琪调试: 使用上下文回复');
            return contextResponse;
        }
        
        // 检查关键词
        console.log('琪琪调试: 开始检查关键词匹配');
        for (const [category, keywords] of Object.entries(this.keywords)) {
            if (keywords.some(keyword => lowerMessage.includes(keyword))) {
                console.log('琪琪调试: 匹配到类别', category);
                const responses = this.responses[category];
                if (responses) {
                    const response = responses[Math.floor(Math.random() * responses.length)];
                    console.log('琪琪调试: 生成回复', response);
                    // 根据情感状态调整回复
                    return this.adjustResponseByEmotion(response, detectedEmotion);
                } else {
                    console.log('琪琪调试: 类别没有对应的回复库', category);
                }
            }
        }

        console.log('琪琪调试: 没有匹配到关键词，使用默认回复');
        // 默认回复
        const defaultResponses = this.responses.default;
        const defaultResponse = defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
        return this.adjustResponseByEmotion(defaultResponse, detectedEmotion);
    }

    handleAction(action) {
        let response = '';
        
        switch (action) {
            case 'greet':
                response = this.responses.greeting[Math.floor(Math.random() * this.responses.greeting.length)];
                break;
            case 'compliment':
                response = this.responses.compliment[Math.floor(Math.random() * this.responses.compliment.length)];
                break;
            case 'play':
                response = this.responses.play[Math.floor(Math.random() * this.responses.play.length)];
                break;
            case 'comfort':
                response = this.responses.comfort[Math.floor(Math.random() * this.responses.comfort.length)];
                break;
            case 'food':
                response = this.responses.food[Math.floor(Math.random() * this.responses.food.length)];
                break;
            case 'sleep':
                response = this.responses.sleep[Math.floor(Math.random() * this.responses.sleep.length)];
                break;
            case 'catFact':
                this.getCatFact();
                return;
            case 'catImage':
                this.getCatImage();
                return;
            case 'dogImage':
                this.getDogImage();
                return;
        }

        this.addMessage(response, 'assistant');
    }

    addMessage(content, sender) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        // 添加头像
        const messageAvatar = document.createElement('div');
        messageAvatar.className = 'message-avatar';
        
        if (sender === 'assistant') {
            const miniAvatar = document.createElement('img');
            miniAvatar.src = 'avatar.png';
            miniAvatar.alt = '琪琪';
            miniAvatar.className = 'mini-avatar-img';
            messageAvatar.appendChild(miniAvatar);
        } else {
            // 用户头像，可以是一个简单的默认头像
            const userAvatar = document.createElement('div');
            userAvatar.className = 'mini-avatar-img';
            userAvatar.style.background = 'linear-gradient(135deg, #e6f3ff, #d4e9ff)';
            userAvatar.innerHTML = '<div style="color: #4a5f8a; font-size: 12px; font-weight: bold; display: flex; align-items: center; justify-content: center; height: 100%;">👤</div>';
            messageAvatar.appendChild(userAvatar);
        }
        
        // 添加消息内容
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        
        const messageBubble = document.createElement('div');
        messageBubble.className = 'message-bubble';
        messageBubble.textContent = content;
        
        const messageTime = document.createElement('div');
        messageTime.className = 'message-time';
        messageTime.textContent = this.getCurrentTime();
        
        messageContent.appendChild(messageBubble);
        messageContent.appendChild(messageTime);
        
        messageDiv.appendChild(messageAvatar);
        messageDiv.appendChild(messageContent);
        
        chatMessages.appendChild(messageDiv);
        
        // 滚动到底部
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    addMessageWithImage(content, imageUrl) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message assistant';
        
        // 添加头像
        const messageAvatar = document.createElement('div');
        messageAvatar.className = 'message-avatar';
        
        const miniAvatar = document.createElement('img');
        miniAvatar.src = 'avatar.png';
        miniAvatar.alt = '琪琪';
        miniAvatar.className = 'mini-avatar-img';
        messageAvatar.appendChild(miniAvatar);
        
        // 添加消息内容
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        
        const messageBubble = document.createElement('div');
        messageBubble.className = 'message-bubble';
        messageBubble.textContent = content;
        
        // 添加图片
        const imageContainer = document.createElement('div');
        imageContainer.className = 'message-image';
        imageContainer.style.marginTop = '10px';
        imageContainer.style.textAlign = 'center';
        
        const image = document.createElement('img');
        image.src = imageUrl;
        image.alt = '可爱动物图片';
        image.style.maxWidth = '200px';
        image.style.maxHeight = '200px';
        image.style.borderRadius = '10px';
        image.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        image.style.cursor = 'pointer';
        image.onclick = () => window.open(imageUrl, '_blank');
        
        imageContainer.appendChild(image);
        
        const messageTime = document.createElement('div');
        messageTime.className = 'message-time';
        messageTime.textContent = this.getCurrentTime();
        
        messageContent.appendChild(messageBubble);
        messageContent.appendChild(imageContainer);
        messageContent.appendChild(messageTime);
        
        messageDiv.appendChild(messageAvatar);
        messageDiv.appendChild(messageContent);
        
        chatMessages.appendChild(messageDiv);
        
        // 滚动到底部
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    getCurrentTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }

    showSpeechBubble(text) {
        // 在聊天窗口中显示消息
        this.addMessage(text, 'assistant');
    }

    // 视频通话相关方法
    startVideoCall() {
        const videoCallContainer = document.getElementById('videoCallContainer');
        const chatMessages = document.getElementById('chatMessages');
        const chatInputArea = document.querySelector('.chat-input-area');
        
        // 隐藏聊天界面，显示视频界面
        chatMessages.style.display = 'none';
        chatInputArea.style.display = 'none';
        videoCallContainer.style.display = 'flex';
        
        // 静音背景音乐
        if (this.bgMusic && this.musicPlaying) {
            this.bgMusic.pause();
            this.backgroundMusicPaused = true;
            console.log('🎵 视频通话开始，背景音乐已静音');
        }
        
        // 添加视频通话开始消息
        this.addMessage("喂！主人，想和琪琪视频通话吗？我...我才不是特意想见你呢！只是...刚好想看看你！(≧▽≦)", 'assistant');
        
        // 尝试播放视频（确保音频播放）
        const qiqiVideo = document.getElementById('qiqiVideo');
        if (qiqiVideo) {
            qiqiVideo.muted = false;
            qiqiVideo.volume = 1.0;
            qiqiVideo.play().catch(e => {
                console.log('视频播放需要用户交互:', e);
            });
        }
    }

    endVideoCall() {
        const videoCallContainer = document.getElementById('videoCallContainer');
        const chatMessages = document.getElementById('chatMessages');
        const chatInputArea = document.querySelector('.chat-input-area');
        
        // 显示聊天界面，隐藏视频界面
        chatMessages.style.display = '';
        chatInputArea.style.display = '';
        videoCallContainer.style.display = 'none';
        
        // 恢复背景音乐播放
        if (this.bgMusic && this.backgroundMusicPaused) {
            this.bgMusic.play().then(() => {
                this.musicPlaying = true;
                this.backgroundMusicPaused = false;
                console.log('🎵 视频通话结束，背景音乐已恢复');
            }).catch(error => {
                console.log('🎵 背景音乐恢复失败:', error);
            });
        }
        
        // 添加视频通话结束消息
        this.addMessage("哼！视频通话结束了啦！我...我才没有舍不得呢！只是...只是下次想再见到主人...(｡•́︿•̀｡)", 'assistant');
        
        // 暂停视频
        const qiqiVideo = document.getElementById('qiqiVideo');
        if (qiqiVideo) {
            qiqiVideo.pause();
        }
    }

    togglePlayPause() {
        const qiqiVideo = document.getElementById('qiqiVideo');
        const playPauseBtn = document.getElementById('playPauseBtn');
        
        if (qiqiVideo.paused) {
            qiqiVideo.play();
            playPauseBtn.textContent = '⏸️';
        } else {
            qiqiVideo.pause();
            playPauseBtn.textContent = '▶️';
        }
    }

    toggleVolume() {
        const qiqiVideo = document.getElementById('qiqiVideo');
        const volumeBtn = document.getElementById('volumeBtn');
        
        if (qiqiVideo.muted) {
            qiqiVideo.muted = false;
            volumeBtn.textContent = '🔊';
        } else {
            qiqiVideo.muted = true;
            volumeBtn.textContent = '🔇';
        }
    }

    toggleMute() {
        const qiqiVideo = document.getElementById('qiqiVideo');
        const muteBtn = document.getElementById('muteBtn');
        
        if (qiqiVideo.muted) {
            qiqiVideo.muted = false;
            muteBtn.textContent = '🎤';
        } else {
            qiqiVideo.muted = true;
            muteBtn.textContent = '🎤❌';
        }
    }

    toggleVideo() {
        const qiqiVideo = document.getElementById('qiqiVideo');
        const videoBtn = document.getElementById('videoBtn');
        
        if (qiqiVideo.paused) {
            qiqiVideo.play();
            videoBtn.textContent = '📹';
        } else {
            qiqiVideo.pause();
            videoBtn.textContent = '📹❌';
        }
    }

    toggleFullscreen() {
        const videoCallContainer = document.getElementById('videoCallContainer');
        
        if (!document.fullscreenElement) {
            videoCallContainer.requestFullscreen();
        } else {
            document.exitFullscreen();
        }
    }

    seekVideo(e) {
        const qiqiVideo = document.getElementById('qiqiVideo');
        const progressBar = document.getElementById('progressBar');
        const rect = progressBar.getBoundingClientRect();
        const pos = (e.clientX - rect.left) / rect.width;
        qiqiVideo.currentTime = pos * qiqiVideo.duration;
    }

    updateProgress() {
        const qiqiVideo = document.getElementById('qiqiVideo');
        const progressFill = document.getElementById('progressFill');
        const videoTime = document.getElementById('videoTime');
        
        if (qiqiVideo.duration) {
            const progress = (qiqiVideo.currentTime / qiqiVideo.duration) * 100;
            progressFill.style.width = progress + '%';
            
            const currentMinutes = Math.floor(qiqiVideo.currentTime / 60);
            const currentSeconds = Math.floor(qiqiVideo.currentTime % 60);
            const durationMinutes = Math.floor(qiqiVideo.duration / 60);
            const durationSeconds = Math.floor(qiqiVideo.duration % 60);
            
            videoTime.textContent = `${currentMinutes}:${currentSeconds.toString().padStart(2, '0')} / ${durationMinutes}:${durationSeconds.toString().padStart(2, '0')}`;
        }
    }

    updateVideoInfo() {
        const qiqiVideo = document.getElementById('qiqiVideo');
        const videoTime = document.getElementById('videoTime');
        
        if (qiqiVideo.duration) {
            const durationMinutes = Math.floor(qiqiVideo.duration / 60);
            const durationSeconds = Math.floor(qiqiVideo.duration % 60);
            videoTime.textContent = `0:00 / ${durationMinutes}:${durationSeconds.toString().padStart(2, '0')}`;
        }
    }

    onVideoEnded() {
        const playPauseBtn = document.getElementById('playPauseBtn');
        playPauseBtn.textContent = '▶️';
    }

    initLocalVideo() {
        const localVideo = document.getElementById('localVideo');
        if (localVideo) {
            // 使用优雅的占位符替代摄像头 - 不再请求权限
            localVideo.style.background = `
                linear-gradient(135deg, #667eea 0%, #764ba2 100%),
                radial-gradient(circle at center, rgba(255,255,255,0.1) 0%, transparent 70%)
            `;
            localVideo.style.backgroundSize = 'cover';
            localVideo.innerHTML = `
                <div style="
                    display: flex; 
                    align-items: center; 
                    justify-content: center; 
                    height: 100%; 
                    color: white; 
                    font-size: 14px;
                    flex-direction: column;
                    gap: 8px;
                    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
                ">
                    <div style="font-size: 24px;">👤</div>
                    <div style="font-size: 10px; opacity: 0.8;">你的画面</div>
                </div>
            `;
            
            console.log('🎥 视频通话功能已初始化（演示模式）');
        }
    }

    handleVideoAction(action) {
        let response = '';
        
        switch (action) {
            case 'wave':
                response = "呀！主人跟琪琪挥手呢！我...我才没有开心到跳起来呢！只是...刚好也想和主人打招呼！(≧▽≦)";
                break;
            case 'heart':
                response = "哇！主人给琪琪送心心！我...我才没有脸红呢！只是...只是觉得主人好温柔！(｡♥‿♥｡)";
                break;
            case 'blowkiss':
                response = "哼！主人给琪琪飞吻！我...我才没有心动呢！只是...刚好有点热...(⁄ ⁄•⁄ω⁄•⁄ ⁄)";
                break;
            case 'dance':
                response = "哇哦！主人想和琪琪一起跳舞！我...我才没有很开心呢！只是...刚好想跳舞了！(♪♪)";
                break;
            case 'sleep':
                response = "啊啦！主人困了吗？琪琪...琪琪会陪着主人的，乖乖的哦...(｡•́︿•̀｡)";
                break;
        }
        
        // 在视频通话期间添加消息到聊天记录
        this.addMessage(response, 'assistant');
    }

    startRandomActions() {
        // 随机主动发言
        setInterval(() => {
            if (Math.random() < 0.1) { // 10% 概率
                const randomMessages = [
                    "喂！主人，陪琪琪玩一会儿吧！(≧▽≦) 我...我才不是特意想找你玩呢！",
                    "哼~琪琪好无聊哦...主人理理我嘛！(｡•́︿•̀｡) 不理琪琪的话...会生气的哦！",
                    "今天天气真好呢！主人想出去玩吗？琪琪...琪琪想和你一起去散步！(｡･ω･｡)",
                    "主人主人！我...我爱你哟！(｡♥ω♥｡) 才不是真的爱你呢！哼！",
                    "琪琪想听主人说话了~主人的声音好好听呀...(｡•́︿•̀｡) 不...不是想听！是顺便听一下！",
                    "主人最近过得怎么样呀？琪琪...琪琪很担心你的！(♥ω♥ ) 才不是担心呢！",
                    "主人主人~琪琪在这里哦！快看看琪琪嘛！(｡･ω･｡) 不...不是想被你看！",
                    "呐呐~主人要不要听琪琪唱歌呀？琪琪唱歌很好听的！(♪♪) 不...不是特意唱给你听的！",
                    "主人主人！琪琪想你了呢~快回来陪琪琪玩吧！(｡♥‿♥｡) 才不是想你呢！哼！",
                    "主人最近有没有想琪琪呀？琪琪...琪琪好想主人哦！(♥ω♥ ) 不...不是想你！"
                ];
                
                const randomMessage = randomMessages[Math.floor(Math.random() * randomMessages.length)];
                this.addMessage(randomMessage, 'assistant');
            }
        }, 30000); // 每30秒检查一次
    }

    // API相关方法
    async getCatFact() {
        this.addMessage("琪琪正在查找猫咪知识... (｡･ω･｡)ﾉ♡", 'assistant');
        
        try {
            const response = await fetch(this.apis.catFact);
            const data = await response.json();
            
            const fact = data.fact;
            const translatedFact = await this.translateText(fact);
            
            this.addMessage(`琪琪学到啦：${translatedFact}`, 'assistant');
        } catch (error) {
            this.addMessage("呜哇~琪琪找不到猫咪知识了... (＞﹏＜) 要不我们聊点别的？", 'assistant');
        }
    }

    async getCatImage() {
        this.addMessage("琪琪在找可爱的猫咪图片... (≧▽≦)ﾉ", 'assistant');
        
        try {
            const response = await fetch(this.apis.catImage);
            const data = await response.json();
            
            if (data && data.length > 0) {
                const imageUrl = data[0].url;
                this.addMessageWithImage(`琪琪找到了！快看这只可爱的猫咪~ 🐱`, imageUrl);
            } else {
                throw new Error('No cat image found');
            }
        } catch (error) {
            this.addMessage("呜哇~琪琪找不到猫咪图片了... (＞﹏＜) 要不我们聊点别的？", 'assistant');
        }
    }

    async getDogImage() {
        this.addMessage("琪琪在找可爱的狗狗图片... (≧▽≦)ﾉ", 'assistant');
        
        try {
            const response = await fetch(this.apis.dogImage);
            const data = await response.json();
            
            if (data.status === 'success') {
                const imageUrl = data.message;
                this.addMessageWithImage(`琪琪找到了！快看这只可爱的狗狗~ 🐶`, imageUrl);
            } else {
                throw new Error('Failed to get dog image');
            }
        } catch (error) {
            this.addMessage("呜哇~琪琪找不到狗狗图片了... (＞﹏＜) 要不我们聊点别的？", 'assistant');
        }
    }

    async translateText(text, targetLang = 'zh') {
        try {
            const url = `${this.apis.translate}?q=${encodeURIComponent(text)}&langpair=en|${targetLang}`;
            const response = await fetch(url);
            const data = await response.json();
            
            if (data.responseData && data.responseData.translatedText) {
                return data.responseData.translatedText;
            } else {
                return text; // 如果翻译失败，返回原文
            }
        } catch (error) {
            console.error('Translation error:', error);
            return text; // 如果翻译失败，返回原文
        }
    }

    // 智能对话增强方法
    updateConversationHistory(message) {
        console.log('琪琪调试: 更新对话历史', message);
        this.conversationHistory.push({
            message: message,
            timestamp: Date.now(),
            type: 'user'
        });
        
        // 保持最近10条对话记录
        if (this.conversationHistory.length > 10) {
            this.conversationHistory = this.conversationHistory.slice(-10);
        }
        
        console.log('琪琪调试: 当前对话历史', this.conversationHistory);
        // 更新用户画像
        this.userProfile.lastInteraction = Date.now();
    }

    detectEmotion(message) {
        const lowerMessage = message.toLowerCase();
        
        for (const [emotion, keywords] of Object.entries(this.emotionKeywords)) {
            if (keywords.some(keyword => lowerMessage.includes(keyword))) {
                return emotion;
            }
        }
        
        return 'neutral';
    }

    updateEmotionState(emotion) {
        this.emotionState = emotion;
        
        // 更新用户心情历史
        this.userProfile.moodHistory.push({
            emotion: emotion,
            timestamp: Date.now()
        });
        
        // 保持最近5次心情记录
        if (this.userProfile.moodHistory.length > 5) {
            this.userProfile.moodHistory = this.userProfile.moodHistory.slice(-5);
        }
    }

    analyzeContext(message) {
        const lowerMessage = message.toLowerCase();
        console.log('琪琪调试: 分析上下文', lowerMessage);
        
        // 检查是否是追问
        if (this.conversationPatterns.followUp.question.some(pattern => lowerMessage.includes(pattern))) {
            console.log('琪琪调试: 检测到追问词');
            if (this.conversationHistory.length > 0) {
                const lastTopic = this.getLastTopic();
                console.log('琪琪调试: 上一个话题', lastTopic);
                if (lastTopic) {
                    return this.generateFollowUpResponse(lastTopic);
                }
            }
        }
        
        // 检查是否是同意/不同意
        if (this.conversationPatterns.followUp.agreement.some(pattern => lowerMessage.includes(pattern))) {
            console.log('琪琪调试: 检测到同意');
            return "嗯嗯！主人说得对！琪琪也这么觉得呢！(≧▽≦)";
        }
        
        if (this.conversationPatterns.followUp.disagreement.some(pattern => lowerMessage.includes(pattern))) {
            console.log('琪琪调试: 检测到不同意');
            return "哼！主人说得不对！琪琪才不认同呢！(￣^￣)";
        }
        
        console.log('琪琪调试: 无上下文匹配');
        return null;
    }

    getLastTopic() {
        // 获取上一个话题
        const recentMessages = this.conversationHistory.slice(-3);
        for (let msg of recentMessages) {
            for (const [category, keywords] of Object.entries(this.keywords)) {
                if (keywords.some(keyword => msg.message.toLowerCase().includes(keyword))) {
                    return category;
                }
            }
        }
        return null;
    }

    generateFollowUpResponse(topic) {
        const followUpResponses = {
            greeting: "主人又在和琪琪打招呼呀！琪琪很开心呢！(≧▽≦)",
            compliment: "嘿嘿~主人又夸琪琪了！琪琪都要害羞了！(⁄ ⁄•⁄ω⁄•⁄ ⁄)",
            comfort: "主人还在难过吗？琪琪会一直陪着主人的！(｡･ω･｡)",
            play: "主人还想和琪琪玩呀！今天想玩什么游戏呢？(≧∇≦)ﾉ",
            food: "主人又提到吃的了！琪琪也饿了喵~(｡•́︿•̀｡)",
            sleep: "主人还在想睡觉吗？琪琪可以陪主人一起休息哦！(｡♥ω♥｡)",
            love: "主人又在说喜欢了！琪琪也最喜欢主人了！(♥ω♥ )",
            daily: "主人又在聊今天的事情呀！今天过得怎么样呢？(｡･ω･｡)",
            weather: "主人又关心天气了！今天天气如何呀？(≧▽≦)",
            time: "主人又在问时间了！时间过得真快呢！(★ω★)",
            home: "主人又在想家了吗？家是最温暖的港湾呢！(｡♥ω♥｡)",
            school: "主人又在聊学校了！学习辛苦了吗？(＞﹏＜)",
            shopping: "主人又想去购物了？想买什么呢？(≧∇≦)ﾉ",
            health: "主人又在关心健康了！身体是革命的本钱哦！(｡•́︿•̀｡)",
            media: "主人又在聊娱乐了！有什么好看的好玩的吗？(★ω★)",
            friends: "主人又在聊朋友了！和朋友相处得开心吗？(≧▽≦)",
            travel: "主人又想去旅行了！想去哪里玩呀？(｡･ω･｡)"
        };
        
        return followUpResponses[topic] || "主人还想聊什么呀？琪琪都陪着呢！(｡･ω･｡)";
    }

    adjustResponseByEmotion(response, emotion) {
        // 根据情感状态调整回复的语气
        const emotionAdjustments = {
            happy: "琪琪看到主人这么开心，也很高兴呢！",
            sad: "琪琪感受到主人难过了，想要安慰主人...",
            angry: "主人好像生气了，琪琪要乖乖的...",
            tired: "主人看起来累了，琪琪轻声说话...",
            surprised: "哇！主人也很惊讶呢！",
            love: "琪琪感受到主人的爱意了~",
            excited: "琪琪也跟着主人一起激动起来了！",
            worried: "琪琪有点担心主人，希望一切都好...",
            grateful: "琪琪很开心能帮到主人！",
            neutral: ""
        };
        
        const adjustment = emotionAdjustments[emotion];
        if (adjustment && Math.random() > 0.5) {
            return `${response} ${adjustment}`;
        }
        
        return response;
    }

    // 背景音乐控制方法
    initBackgroundMusic() {
        this.bgMusic = document.getElementById('bgMusic');
        const musicToggleBtn = document.getElementById('musicToggleBtn');
        const musicVolumeControl = document.getElementById('musicVolumeControl');
        const musicVolumeSlider = document.getElementById('musicVolumeSlider');
        const volumeDisplay = document.querySelector('.volume-display');
        
        // 设置初始音量
        if (this.bgMusic) {
            this.bgMusic.volume = this.musicVolume;
        }
        
        // 音乐播放/暂停按钮
        musicToggleBtn.addEventListener('click', () => {
            this.toggleBackgroundMusic();
        });
        
        // 音量滑块
        musicVolumeSlider.addEventListener('input', (e) => {
            this.updateMusicVolume(e.target.value);
        });
        
        // 显示/隐藏音量控制
        musicToggleBtn.addEventListener('mouseenter', () => {
            musicVolumeControl.style.display = 'flex';
        });
        
        musicToggleBtn.addEventListener('mouseleave', () => {
            setTimeout(() => {
                if (!musicVolumeControl.matches(':hover')) {
                    musicVolumeControl.style.display = 'none';
                }
            }, 1000);
        });
        
        musicVolumeControl.addEventListener('mouseleave', () => {
            musicVolumeControl.style.display = 'none';
        });
        
        // 尝试自动播放背景音乐
        this.attemptAutoPlay();
    }
    
    async attemptAutoPlay() {
        try {
            if (this.bgMusic) {
                // 设置较低的初始音量
                this.bgMusic.volume = 0.1;
                
                // 设置音频属性，优化MP4音频播放
                this.bgMusic.preload = 'auto';
                this.bgMusic.muted = false;
                
                // 尝试播放
                const playPromise = this.bgMusic.play();
                
                if (playPromise !== undefined) {
                    await playPromise;
                    this.musicPlaying = true;
                    this.updateMusicButton();
                    console.log('🎵 背景音乐自动播放成功');
                    
                    // 淡入效果
                    this.fadeInMusic();
                }
            }
        } catch (error) {
            console.log('🎵 背景音乐自动播放失败，需要用户交互:', error);
            // 等待用户交互后再尝试播放
            this.waitForUserInteraction();
        }
    }
    
    waitForUserInteraction() {
        const interactions = ['click', 'touchstart', 'keydown'];
        const handleInteraction = () => {
            // 直接播放音乐并淡入
            this.bgMusic.volume = 0.1;
            this.bgMusic.play().then(() => {
                this.musicPlaying = true;
                this.updateMusicButton();
                this.fadeInMusic();
                console.log('🎵 用户交互后背景音乐开始播放');
            }).catch(error => {
                console.log('🎵 用户交互后背景音乐播放失败:', error);
            });
            // 移除事件监听
            interactions.forEach(event => {
                document.removeEventListener(event, handleInteraction);
            });
        };
        
        interactions.forEach(event => {
            document.addEventListener(event, handleInteraction, { once: true });
        });
    }
    
    toggleBackgroundMusic() {
        if (!this.bgMusic) return;
        
        if (this.musicPlaying) {
            this.bgMusic.pause();
            this.musicPlaying = false;
            console.log('🎵 背景音乐暂停');
        } else {
            this.bgMusic.volume = this.musicVolume;
            this.bgMusic.play().then(() => {
                this.musicPlaying = true;
                console.log('🎵 背景音乐开始播放');
            }).catch(error => {
                console.log('🎵 背景音乐播放失败:', error);
            });
        }
        
        this.updateMusicButton();
    }
    
    updateMusicButton() {
        const musicToggleBtn = document.getElementById('musicToggleBtn');
        if (this.musicPlaying) {
            musicToggleBtn.classList.add('playing');
            musicToggleBtn.innerHTML = '🎶';
        } else {
            musicToggleBtn.classList.remove('playing');
            musicToggleBtn.innerHTML = '🎵';
        }
    }
    
    updateMusicVolume(value) {
        const volume = value / 100;
        this.musicVolume = volume;
        
        if (this.bgMusic) {
            this.bgMusic.volume = volume;
        }
        
        const volumeDisplay = document.querySelector('.volume-display');
        volumeDisplay.textContent = value + '%';
        
        console.log('🎵 音量调整至:', value + '%');
    }
    
    fadeInMusic() {
        if (!this.bgMusic) return;
        
        const targetVolume = this.musicVolume;
        let currentVolume = 0.1;
        const fadeInInterval = setInterval(() => {
            currentVolume += 0.05;
            if (currentVolume >= targetVolume) {
                currentVolume = targetVolume;
                clearInterval(fadeInInterval);
            }
            this.bgMusic.volume = currentVolume;
        }, 200);
    }

    // 爱心粒子特效方法
    initHeartParticles() {
        this.heartContainer = document.getElementById('heartParticles');
        if (!this.heartContainer) return;
        
        // 开始生成爱心粒子
        this.startHeartParticles();
        
        // 每30秒清理一次已经消失的粒子，防止内存泄漏
        setInterval(() => {
            this.cleanupHeartParticles();
        }, 30000);
    }
    
    startHeartParticles() {
        // 立即生成第一批粒子
        this.generateHeartParticles();
        
        // 定期生成新的爱心粒子
        setInterval(() => {
            this.generateHeartParticles();
        }, 2000);
    }
    
    generateHeartParticles() {
        if (!this.heartContainer) return;
        
        // 每次生成1-3个随机粒子
        const particleCount = Math.floor(Math.random() * 3) + 1;
        
        for (let i = 0; i < particleCount; i++) {
            setTimeout(() => {
                this.createHeartParticle();
            }, i * 500); // 错开生成时间
        }
    }
    
    createHeartParticle() {
        if (!this.heartContainer) return;
        
        const particle = document.createElement('div');
        particle.className = 'heart-particle';
        
        // 随机选择爱心符号
        const heartSymbols = ['♡', '♥', '💕', '💖', '💗', '💓', '💘', '💝'];
        particle.textContent = heartSymbols[Math.floor(Math.random() * heartSymbols.length)];
        
        // 随机位置
        const startX = Math.random() * window.innerWidth;
        particle.style.left = startX + 'px';
        
        // 随机大小样式
        const sizeClasses = ['', 'large', 'small', 'sparkle', 'pulse'];
        const randomSize = sizeClasses[Math.floor(Math.random() * sizeClasses.length)];
        if (randomSize) {
            particle.classList.add(randomSize);
        }
        
        // 随机动画延迟
        particle.style.animationDelay = Math.random() * 2 + 's';
        
        // 添加到容器
        this.heartContainer.appendChild(particle);
        this.heartParticles.push(particle);
        
        // 动画结束后移除粒子
        const animationDuration = parseFloat(getComputedStyle(particle).animationDuration) * 1000;
        setTimeout(() => {
            this.removeHeartParticle(particle);
        }, animationDuration);
    }
    
    removeHeartParticle(particle) {
        if (!particle || !particle.parentNode) return;
        
        particle.parentNode.removeChild(particle);
        const index = this.heartParticles.indexOf(particle);
        if (index > -1) {
            this.heartParticles.splice(index, 1);
        }
    }
    
    cleanupHeartParticles() {
        // 清理已经从DOM中移除的粒子引用
        this.heartParticles = this.heartParticles.filter(particle => {
            return particle && particle.parentNode;
        });
        
        // 如果粒子数量过多，移除最老的一些
        if (this.heartParticles.length > 50) {
            const toRemove = this.heartParticles.splice(0, this.heartParticles.length - 50);
            toRemove.forEach(particle => {
                if (particle && particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            });
        }
    }
    
    // 特殊效果：在特定位置爆发爱心
    createHeartBurst(x, y, count = 8) {
        if (!this.heartContainer) return;
        
        for (let i = 0; i < count; i++) {
            const particle = document.createElement('div');
            particle.className = 'heart-particle sparkle';
            particle.textContent = '💖';
            
            // 设置起始位置
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            
            // 随机方向
            const angle = (i / count) * Math.PI * 2;
            const distance = 50 + Math.random() * 50;
            const endX = x + Math.cos(angle) * distance;
            const endY = y + Math.sin(angle) * distance;
            
            // 自定义动画
            particle.style.animation = 'none';
            particle.style.opacity = '1';
            particle.style.transform = 'scale(1)';
            
            this.heartContainer.appendChild(particle);
            
            // 执行爆发动画
            setTimeout(() => {
                particle.style.transition = 'all 1s ease-out';
                particle.style.opacity = '0';
                particle.style.transform = `translate(${endX - x}px, ${endY - y}px) scale(0.5) rotate(360deg)`;
            }, 10);
            
            // 清理
            setTimeout(() => {
                this.removeHeartParticle(particle);
            }, 1000);
        }
    }

    // 游戏窗口相关方法
    initGameWindow() {
        this.gameWindow = document.getElementById('gameWindow');
        this.gameFrame = document.getElementById('gameFrame');
        this.gameMessages = document.getElementById('gameMessages');
        
        if (!this.gameWindow || !this.gameFrame || !this.gameMessages) {
            console.log('🎮 游戏窗口元素未找到');
            return;
        }
        
        console.log('🎮 游戏窗口初始化完成');
    }
    
    startGame() {
        if (!this.gameWindow) return;
        
        // 隐藏聊天界面，显示游戏界面
        const chatMessages = document.getElementById('chatMessages');
        const chatInputArea = document.querySelector('.chat-input-area');
        
        if (chatMessages) chatMessages.style.display = 'none';
        if (chatInputArea) chatInputArea.style.display = 'none';
        
        // 显示游戏窗口
        this.gameWindow.style.display = 'flex';
        
        // 清空游戏消息区域并立即发送欢迎消息
        if (this.gameMessages) {
            this.gameMessages.innerHTML = `
                <div class="game-message qiqi">
                    <div class="game-message-avatar">
                        <img src="avatar_qiqi.png" alt="琪琪" class="game-mini-avatar">
                    </div>
                    <div class="game-message-content">
                        <div class="game-message-bubble">
                            哼！主人终于想和琪琪一起玩游戏啦！我...我才没有特意等你呢！只是刚好也想玩而已！(≧▽≦)
                        </div>
                    </div>
                </div>
            `;
        }
        
        // 启动自动陪玩消息系统
        this.startGameCompanion();
        
        // 添加游戏开始消息
        this.addMessage("哼！想和琪琪一起玩游戏吗？我...我才不是特意准备的呢！只是刚好有这些游戏而已！(≧▽≦)", 'assistant');
        
        // 立即发送游戏打开消息
        this.sendGameOpeningMessage();
        
        // 2秒后发送第二条消息
        setTimeout(() => {
            this.sendGameHomeMessage();
        }, 2000);
        
        // 5秒后发送第三条消息
        setTimeout(() => {
            this.sendRandomGameMessage();
        }, 5000);
        
        console.log('🎮 游戏窗口已打开');
    }
    
    closeGame() {
        if (!this.gameWindow) return;
        
        // 停止游戏陪玩系统
        this.stopGameCompanion();
        
        // 隐藏游戏窗口
        this.gameWindow.style.display = 'none';
        
        // 显示聊天界面
        const chatMessages = document.getElementById('chatMessages');
        const chatInputArea = document.querySelector('.chat-input-area');
        
        if (chatMessages) chatMessages.style.display = '';
        if (chatInputArea) chatInputArea.style.display = '';
        
        // 发送游戏关闭消息到游戏消息区域
        setTimeout(() => {
            this.sendGameClosingMessage();
        }, 500);
        
        // 添加游戏结束消息到主聊天区域
        setTimeout(() => {
            this.addMessage("游戏结束啦！下次再和主人一起玩吧！我...我才没有玩得很开心呢！(￣▽￣)", 'assistant');
        }, 1000);
        
        console.log('🎮 游戏窗口已关闭');
    }
    
    minimizeGame() {
        if (!this.gameWindow) return;
        
        // 停止游戏鼓励消息
        this.stopGameEncouragement();
        
        // 简单的最小化效果 - 先隐藏，可以通过其他方式恢复
        this.gameWindow.style.display = 'none';
        
        // 显示聊天界面
        const chatMessages = document.getElementById('chatMessages');
        const chatInputArea = document.querySelector('.chat-input-area');
        
        if (chatMessages) chatMessages.style.display = '';
        if (chatInputArea) chatInputArea.style.display = '';
        
        // 添加最小化提示
        this.addMessage("游戏最小化啦！点击🎮同玩模式可以继续哦！", 'assistant');
        
        console.log('🎮 游戏窗口已最小化');
    }
    
    // 游戏陪玩系统
    startGameCompanion() {
        // 清除之前的定时器
        if (this.gameMessageInterval) {
            clearInterval(this.gameMessageInterval);
            console.log('🎮 清除之前的游戏消息定时器');
        }
        
        // 设置随机发送陪玩消息的定时器（6-10秒随机间隔）
        const interval = Math.random() * 4000 + 6000; // 6-10秒
        console.log('🎮 启动游戏消息定时器，间隔:', Math.round(interval), 'ms');
        
        this.gameMessageInterval = setInterval(() => {
            console.log('🎮 定时器触发，发送随机消息');
            this.sendRandomGameMessage();
        }, interval);
        
        // 立即发送第一条消息
        setTimeout(() => {
            console.log('🎮 发送第一条游戏消息');
            this.sendRandomGameMessage();
        }, 3000);
        
        // 添加定时器状态检查
        this.gameCompanionActive = true;
        console.log('🎮 游戏陪玩系统已启动');
        
        // 启动定期检查机制，确保陪玩系统正常运行
        this.startGameCompanionHealthCheck();
    }
    
    // 游戏陪玩系统健康检查
    startGameCompanionHealthCheck() {
        // 每30秒检查一次游戏陪玩系统状态
        if (this.gameCompanionHealthInterval) {
            clearInterval(this.gameCompanionHealthInterval);
        }
        
        this.gameCompanionHealthInterval = setInterval(() => {
            if (this.gameCompanionActive && this.gameWindow.style.display === 'flex') {
                // 检查定时器是否还在运行
                if (!this.gameMessageInterval) {
                    console.log('🎮 检测到游戏消息定时器丢失，重新启动');
                    this.startGameCompanion();
                } else {
                    console.log('🎮 游戏陪玩系统运行正常');
                }
            }
        }, 30000); // 30秒检查一次
    }
    
    // 发送随机陪玩消息
    sendRandomGameMessage() {
        if (!this.gameMessages || this.gameWindow.style.display === 'none') {
            console.log('🎮 消息发送失败：游戏消息容器不存在或窗口隐藏');
            return;
        }
        
        let message;
        let messageSource = "";
        
        // 根据当前游戏选择特定消息
        if (this.currentGame && this.gameMessages.gameSpecific[this.currentGame]) {
            // 40% 概率发送游戏特定消息
            // 30% 概率发送鼓励消息
            // 20% 概率发送情境感知消息
            // 10% 概率发送反应消息
            const rand = Math.random();
            
            if (rand < 0.4) {
                message = this.gameMessages.gameSpecific[this.currentGame][Math.floor(Math.random() * this.gameMessages.gameSpecific[this.currentGame].length)];
                messageSource = "游戏特定";
            } else if (rand < 0.7) {
                message = this.gameMessages.encouragement[Math.floor(Math.random() * this.gameMessages.encouragement.length)];
                messageSource = "鼓励";
            } else if (rand < 0.9) {
                message = this.gameMessages.contextual[Math.floor(Math.random() * this.gameMessages.contextual.length)];
                messageSource = "情境感知";
            } else {
                message = this.gameMessages.reactions[Math.floor(Math.random() * this.gameMessages.reactions.length)];
                messageSource = "反应";
            }
        } else {
            // 在游戏主页时，使用更均衡的消息分布
            const allMessages = [
                ...this.gameMessages.encouragement, 
                ...this.gameMessages.gaming, 
                ...this.gameMessages.reactions,
                ...this.gameMessages.contextual
            ];
            message = allMessages[Math.floor(Math.random() * allMessages.length)];
            messageSource = "通用";
        }
        
        console.log(`🎮 发送游戏消息 (${messageSource}):`, message);
        console.log('🎮 游戏窗口状态:', {
            display: this.gameWindow.style.display,
            currentGame: this.currentGame,
            gameMessagesExists: !!this.gameMessages
        });
        
        this.addGameMessage(message, 'qiqi');
    }
    
    // 发送游戏特定消息
    sendGameSpecificMessage(gameType) {
        if (!this.gameMessages || this.gameWindow.style.display === 'none') {
            return;
        }
        
        let message;
        
        if (gameType && this.gameMessages.gameSpecific[gameType]) {
            const specificMessages = this.gameMessages.gameSpecific[gameType];
            message = specificMessages[Math.floor(Math.random() * specificMessages.length)];
        } else {
            // 通用游戏消息
            const generalMessages = [...this.gameMessages.encouragement, ...this.gameMessages.gaming];
            message = generalMessages[Math.floor(Math.random() * generalMessages.length)];
        }
        
        this.addGameMessage(message, 'qiqi');
    }
    
    // 发送游戏主页消息
    sendGameHomeMessage() {
        if (!this.gameMessages || this.gameWindow.style.display === 'none') {
            return;
        }
        
        const homeMessages = [
            "主人，欢迎来到游戏大厅！想玩什么游戏呢？琪琪推荐2048哦！",
            "主人，这里有好多游戏呢！琪琪会陪着主人一起玩的！",
            "主人想玩哪个游戏？琪琪给主人加油打气！",
            "游戏大厅真好呢！主人和琪琪一起玩游戏吧！",
            "主人，随便选一个游戏吧！琪琪都会陪你的！"
        ];
        
        const message = homeMessages[Math.floor(Math.random() * homeMessages.length)];
        this.addGameMessage(message, 'qiqi');
    }
    
    // 发送游戏打开消息
    sendGameOpeningMessage() {
        if (!this.gameMessages || this.gameWindow.style.display === 'none') {
            return;
        }
        
        const message = this.gameMessages.gameOpening[Math.floor(Math.random() * this.gameMessages.gameOpening.length)];
        this.addGameMessage(message, 'qiqi');
    }
    
    // 发送游戏关闭消息
    sendGameClosingMessage() {
        if (!this.gameMessages || this.gameWindow.style.display === 'none') {
            return;
        }
        
        const message = this.gameMessages.gameClosing[Math.floor(Math.random() * this.gameMessages.gameClosing.length)];
        this.addGameMessage(message, 'qiqi');
    }
    
    // 添加游戏消息
    addGameMessage(messageText, sender) {
        if (!this.gameMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `game-message ${sender}`;
        
        const avatarImg = sender === 'qiqi' ? 'avatar_qiqi.png' : 'avatar_qiqi.png';
        
        messageDiv.innerHTML = `
            <div class="game-message-avatar">
                <img src="${avatarImg}" alt="琪琪" class="game-mini-avatar">
            </div>
            <div class="game-message-content">
                <div class="game-message-bubble">
                    ${messageText}
                </div>
            </div>
        `;
        
        this.gameMessages.appendChild(messageDiv);
        this.gameMessages.scrollTop = this.gameMessages.scrollHeight;
    }
    
    // 停止游戏陪玩
    stopGameCompanion() {
        if (this.gameMessageInterval) {
            clearInterval(this.gameMessageInterval);
            this.gameMessageInterval = null;
            console.log('🎮 游戏消息定时器已停止');
        }
        
        if (this.gameCompanionHealthInterval) {
            clearInterval(this.gameCompanionHealthInterval);
            this.gameCompanionHealthInterval = null;
            console.log('🎮 游戏陪玩健康检查已停止');
        }
        
        this.gameCompanionActive = false;
        console.log('🎮 游戏陪玩系统已停止');
    }
    
    loadGame(gameType) {
        if (!this.gameFrame) return;
        
        // 设置当前游戏类型
        this.currentGame = gameType;
        
        // 检查是否返回游戏主页
        const isReturningHome = gameType === 'home' || this.gameFrame.src.includes('games_home.html');
        
        const gameUrls = {
            'home': 'https://bonana521.github.io/2048-game/games_home.html',
            '2048': 'https://bonana521.github.io/2048-game/2048.html',
            'pacman': 'https://bonana521.github.io/2048-game/pacman.html',
            'snake': 'https://bonana521.github.io/2048-game/snake.html',
            'life': 'https://bonana521.github.io/2048-game/gameoflife.html'
        };
        
        const gameNames = {
            'home': '游戏大厅',
            '2048': '2048数字游戏',
            'pacman': '吃豆人游戏',
            'snake': '贪吃蛇游戏',
            'life': '康威生命游戏'
        };
        
        const gameEncouragement = {
            'home': '欢迎回到游戏大厅！主人想玩什么游戏呢？琪琪都陪着你！',
            '2048': '琪琪知道主人很聪明的！一定可以合并出2048的！',
            'pacman': '小心幽灵哦！琪琪会保护主人的！',
            'snake': '让小蛇长得更长吧！琪琪给主人加油！',
            'life': '生命的演化好神奇啊！主人和琪琪一起观察吧！'
        };
        
        if (gameUrls[gameType]) {
            this.gameFrame.src = gameUrls[gameType];
            this.addMessage(`切换到${gameNames[gameType]}！加油哦，主人！💪`, 'assistant');
            
            // 立即发送游戏专属鼓励消息
            this.addGameMessage(gameEncouragement[gameType]);
            
            // 如果是返回主页，发送主页欢迎消息，否则发送游戏特定消息
            if (gameType === 'home' || isReturningHome) {
                // 立即发送主页欢迎消息
                this.sendGameHomeMessage();
                // 3秒后再发送一条相关消息
                setTimeout(() => {
                    this.sendGameHomeMessage();
                }, 3000);
            } else {
                // 立即发送游戏特定消息
                this.sendGameSpecificMessage(gameType);
                // 3秒后再发送一条鼓励消息
                setTimeout(() => {
                    this.sendGameSpecificMessage(gameType);
                }, 3000);
            }
            
            console.log(`🎮 加载游戏: ${gameNames[gameType]}`);
        } else {
            this.addMessage("唔...这个游戏好像还没准备好呢！(￣▽￣;)", 'assistant');
        }
    }
    
    // 游戏鼓励消息系统
    startGameEncouragement() {
        // 先停止之前的消息
        this.stopGameEncouragement();
        
        // 立即发送第一条鼓励消息
        this.sendRandomEncouragement();
        
        // 每8-12秒发送一次鼓励消息
        this.gameMessageInterval = setInterval(() => {
            this.sendRandomEncouragement();
        }, Math.random() * 4000 + 8000); // 8-12秒随机
    }
    
    stopGameEncouragement() {
        if (this.gameMessageInterval) {
            clearInterval(this.gameMessageInterval);
            this.gameMessageInterval = null;
        }
    }
    
    sendRandomEncouragement() {
        if (!this.currentGame) return;
        
        const encouragementMessages = {
            '2048': [
                "主人加油！琪琪相信你一定可以合并出更大的数字！💪",
                "哇！主人的操作好厉害！琪琪都看呆了！(≧▽≦)",
                "别着急慢慢来，琪琪会一直陪着主人的！",
                "主人好聪明！这个游戏琪琪都玩不好呢！",
                "快成功了！琪琪给主人加油打气！✨",
                "主人是最棒的！琪琪为客人感到骄傲！💕",
                "这个数字好大！主人的思维好灵活！",
                "琪琪觉得主人一定可以达到2048的！"
            ],
            'pacman': [
                "主人小心幽灵！琪琪会保护你的！👻",
                "吃掉所有豆豆吧！琪琪给主人加油！",
                "主人的反应好快！琪琪都看不过来了！",
                "哇！主人好厉害！琪琪好崇拜你！",
                "小心拐角！幽灵会突然出现的哦！",
                "琪琪会为主人祈祷的！不要被幽灵抓到！",
                "主人的操作好流畅！琪琪好佩服！",
                "收集能量豆，可以反过来追幽灵哦！"
            ],
            'snake': [
                "让小蛇长得更长吧！琪琪给主人加油！🐍",
                "主人的控制好精准！琪琪都学不会呢！",
                "小心不要撞到墙壁哦！琪琪会担心的！",
                "哇！小蛇变得好长！主人好厉害！",
                "琪琪觉得主人是最厉害的蛇蛇控制师！",
                "收集更多食物吧！琪琪为主人加油！",
                "主人的策略好棒！琪琪都看不懂呢！",
                "小心不要撞到自己的尾巴哦！"
            ],
            'life': [
                "生命的演化好神奇！主人和琪琪一起观察吧！🧬",
                "哇！这个图案好漂亮！琪琪好喜欢！",
                "主人觉得细胞的世界有趣吗？琪琪觉得好神奇！",
                "看着生命演化，琪琪感觉好平静呢～",
                "主人和琪琪一起探索生命的奥秘吧！",
                "这个细胞自动机好聪明！琪琪都佩服！",
                "生命的力量好伟大！琪琪好感动！",
                "主人觉得哪个图案最漂亮？琪琪喜欢星星形的！"
            ]
        };
        
        const messages = encouragementMessages[this.currentGame];
        if (messages && messages.length > 0) {
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            this.addGameMessage(randomMessage);
        }
    }
    
    addGameMessage(message) {
        if (!this.gameMessages) {
            console.log('🎮 消息添加失败：gameMessages 容器不存在');
            return;
        }
        
        console.log('🎮 尝试添加消息:', message);
        console.log('🎮 gameMessages 容器状态:', {
            exists: !!this.gameMessages,
            children: this.gameMessages.children.length,
            display: this.gameMessages.style.display
        });
        
        // 检查是否已有琪琪的消息，如果有则替换
        const existingMessage = this.gameMessages.querySelector('.game-message.qiqi');
        
        if (existingMessage) {
            console.log('🎮 找到现有消息，进行替换');
            // 替换现有消息的内容
            const messageBubble = existingMessage.querySelector('.game-message-bubble');
            if (messageBubble) {
                messageBubble.textContent = message;
                console.log('🎮 消息内容已更新');
            }
            
            // 添加淡入淡出动画效果
            existingMessage.style.animation = 'none';
            existingMessage.offsetHeight; // 触发重排
            existingMessage.style.animation = 'fadeIn 0.5s ease-in-out';
        } else {
            console.log('🎮 创建新消息元素');
            // 如果没有现有消息，则创建新消息
            const messageElement = document.createElement('div');
            messageElement.className = 'game-message qiqi';
            messageElement.innerHTML = `
                <div class="game-message-avatar">
                    <img src="avatar_qiqi.png" alt="琪琪" class="game-mini-avatar">
                </div>
                <div class="game-message-content">
                    <div class="game-message-bubble">
                        ${message}
                    </div>
                </div>
            `;
            
            this.gameMessages.appendChild(messageElement);
            console.log('🎮 新消息已添加到容器');
        }
        
        // 滚动到底部
        this.gameMessages.scrollTop = this.gameMessages.scrollHeight;
        console.log('🎮 消息添加完成，当前消息数量:', this.gameMessages.children.length);
    }
    
    initWindowSizeControl() {
        // 初始化窗口大小控制
        const gameWindow = document.getElementById('gameWindow');
        const resizeBtn = document.getElementById('resizeBtn');
        const resetSizeBtn = document.getElementById('resetSizeBtn');
        const windowSizeInfo = document.getElementById('windowSizeInfo');
        
        if (!gameWindow || !resizeBtn || !resetSizeBtn || !windowSizeInfo) return;
        
        // 默认尺寸
        const defaultWidth = 768;
        const defaultHeight = 1024;
        
        // 防抖函数，限制ResizeObserver的触发频率
        let resizeTimeout;
        const debouncedUpdateSizeInfo = () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                const rect = gameWindow.getBoundingClientRect();
                windowSizeInfo.textContent = `${Math.round(rect.width)} × ${Math.round(rect.height)}`;
                console.log('🎮 窗口大小已更新:', windowSizeInfo.textContent);
            }, 100); // 100ms 防抖延迟
        };
        
        // 重置窗口大小
        const resetWindowSize = () => {
            gameWindow.style.width = defaultWidth + 'px';
            gameWindow.style.height = defaultHeight + 'px';
            debouncedUpdateSizeInfo();
            this.addGameMessage('哼！琪琪帮你重置到默认大小啦！');
        };
        
        // 切换调整大小模式
        const toggleResizeMode = () => {
            const isCurrentlyResizable = gameWindow.style.resize === 'both';
            
            if (isCurrentlyResizable) {
                gameWindow.style.resize = 'none';
                gameWindow.style.overflow = 'hidden';
                resizeBtn.classList.remove('active');
                this.addGameMessage('哼！调整大小模式已关闭！');
            } else {
                gameWindow.style.resize = 'both';
                gameWindow.style.overflow = 'auto';
                resizeBtn.classList.add('active');
                this.addGameMessage('哼！现在可以拖拽窗口边缘调整大小啦！');
            }
        };
        
        // 绑定按钮事件
        resizeBtn.addEventListener('click', toggleResizeMode);
        resetSizeBtn.addEventListener('click', resetWindowSize);
        
        // 监听窗口大小变化（使用防抖）
        const resizeObserver = new ResizeObserver(debouncedUpdateSizeInfo);
        resizeObserver.observe(gameWindow);
        
        // 初始化尺寸显示
        debouncedUpdateSizeInfo();
        
        // 初始设置为不可调整大小
        gameWindow.style.resize = 'none';
        
        console.log('🎮 窗口大小控制已初始化');
    }
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', () => {
    new KawaiiBeastgirlAssistant();
});
// 添加头像动画效果
function animateCharacter(animation) {
    const avatar = document.querySelector('.avatar-face');
    if (avatar) {
        avatar.style.animation = `${animation} 0.5s ease-in-out`;
        setTimeout(() => {
            avatar.style.animation = '';
        }, 500);
    }
}